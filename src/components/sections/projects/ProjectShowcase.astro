---
import { Icon } from "astro-icon/components";
import TechPill from "./TechPill.astro";
import "./project-showcase.css";

export interface Project {
  title: string;
  shortDescription: string;
  imageUrls: string[];
  techStack: string[];
  liveUrl?: string;
  repoUrl?: string;
  imageLayout?: "cover" | "contain";
  backgroundStyle?: string;
  layout?: string;
}

const projects: Project[] = [
  {
    title: "Portfolio Site V3",
    shortDescription: "This portfolio, built with Astro, showcasing interactive components and design.",
    imageUrls: [
      "https://images.unsplash.com/photo-1517694712202-14dd9538aa97?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1170&q=80",
      "https://images.unsplash.com/photo-1555949963-ff9fe0c870eb?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1170&q=80",
      "https://images.unsplash.com/photo-1587620962725-abab7fe55159?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1031&q=80",
    ],
    techStack: ["Astro", "TailwindCSS", "TypeScript", "Vercel"],
    liveUrl: "#",
    repoUrl: "https://github.com/yourusername/portfolio-v3",
    imageLayout: "cover",
  },
  {
    title: "E-Commerce Platform",
    shortDescription: "Full-featured online store with user auth, cart, and checkout.",
    imageUrls: [
      "https://images.unsplash.com/photo-1522204523234-8729aa6e3d5f?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1170&q=80",
      "https://images.unsplash.com/photo-1585194166760-6090e40f094e?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1170&q=80",
      "https://images.unsplash.com/photo-1563013544-824ae1b704d3?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1170&q=80",
    ],
    techStack: ["React", "Next.js", "Firebase", "Stripe API", "TailwindCSS"],
    liveUrl: "#",
    repoUrl: "#",
    imageLayout: "cover",
  },
  {
    title: "Data Visualizer",
    shortDescription: "Interactive dashboard displaying complex data using charts.",
    imageUrls: [
      "https://images.unsplash.com/photo-1551288049-bebda4e38f71?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1170&q=80",
      "https://images.unsplash.com/photo-1611162617474-5b21e879e113?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1074&q=80",
      "https://images.unsplash.com/photo-1460925895917-afdab827c52f?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1115&q=80",
    ],
    techStack: ["SvelteKit", "D3.js", "Python", "FastAPI"],
    liveUrl: "#",
    repoUrl: "#",
    imageLayout: "cover",
  },
];

function techNameToSlug(name: string): string {
  return name
    .toLowerCase()
    .replace(/\+/g, "plus")
    .replace(/[^a-z0-9]/g, "");
}
---

<section id="projects" class="py-20 md:py-28 scroll-mt-20">
  <div class="container mx-auto px-4">
    <div class="text-center mb-12 md:mb-16">
      <h2 class="text-4xl md:text-5xl font-bold mb-3 inline-block bg-gradient-to-r from-[oklch(var(--accent-300))] to-[oklch(var(--accent-500))] text-transparent bg-clip-text">
        My <span class="font-doto font-bold">Creations</span>
      </h2>
      <div class="w-24 h-1 bg-gradient-to-r from-[oklch(var(--accent-500))] to-[oklch(var(--accent-900))] mx-auto rounded-full"></div>
      <p class="text-foreground-muted max-w-2xl mx-auto mt-6 text-lg">A selection of projects where code meets creativity.</p>
    </div>

    <div id="project-grid-container" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 md:gap-10">
      {
        projects.map((project, index) => (
          <article class="project-card">
            <div class="slider-viewport">
              <div class="slider-container" data-total-slides={project.imageUrls.length}>
                {project.imageUrls.map((url, slideIndex) => (
                  <div class="slider-slide" data-slide-index={slideIndex}>
                    <img src={url} alt={`${project.title} screenshot ${slideIndex + 1}`} loading="lazy" width="800" height="500" />
                  </div>
                ))}
              </div>

              {project.imageUrls.length > 1 && (
                <>
                  <button type="button" aria-label="Previous Slide" class="slider-button prev" data-direction="-1">
                    <Icon name="mdi:chevron-left" />
                  </button>
                  <button type="button" aria-label="Next Slide" class="slider-button next" data-direction="1">
                    <Icon name="mdi:chevron-right" />
                  </button>

                  <div class="slider-pagination">
                    {project.imageUrls.map((_, i) => (
                      <button class={`pagination-dot ${i === 0 ? "active" : ""}`} data-index={i} aria-label={`Go to slide ${i + 1}`} title={`Slide ${i + 1}`} />
                    ))}
                  </div>

                  <div class="slide-counter">
                    <span class="current-slide">1</span>
                    <span class="total-slides">/{project.imageUrls.length}</span>
                  </div>
                </>
              )}

              <button type="button" class="fullscreen-button" aria-label="View image fullscreen">
                <Icon name="mdi:fullscreen" />
              </button>
            </div>

            <div class="project-info">
              <h3 class="project-title">{project.title}</h3>
              <p class="project-description">{project.shortDescription}</p>

              <div class="project-tech">
                <div class="flex flex-wrap gap-1.5">
                  {project.techStack.map((tech) => (
                    <TechPill name={tech} data-tech={techNameToSlug(tech)} />
                  ))}
                </div>
              </div>

              <div class="project-links">
                {project.liveUrl && (
                  <a href={project.liveUrl} target="_blank" rel="noopener noreferrer" class="project-link" title="View live demo">
                    <Icon name="mdi:open-in-new" />
                    <span>View Project</span>
                  </a>
                )}
                {project.repoUrl && (
                  <a href={project.repoUrl} target="_blank" rel="noopener noreferrer" class="project-link" title="View source code">
                    <Icon name="mdi:github" />
                    <span>Source Code</span>
                  </a>
                )}
              </div>
            </div>
          </article>
        ))
      }
    </div>
  </div>
</section>

<!-- Create the lightbox container ahead of time -->
<div id="project-lightbox" class="lightbox-container" aria-hidden="true">
  <div class="lightbox-content">
    <img src="" alt="Project image in lightscreen mode" id="lightbox-img" />
    <button class="lightbox-close" aria-label="Close fullscreen view">&times;</button>
  </div>
</div>

<script lang="js">
  document.addEventListener("DOMContentLoaded", () => {
    // Simple cached selectors
    const gridContainer = document.getElementById("project-grid-container");
    const lightbox = document.getElementById("project-lightbox");
    const lightboxImg = document.getElementById("lightbox-img");
    const lightboxClose = lightbox?.querySelector(".lightbox-close");

    // Original scroll state
    let originalScrollPos = 0;
    let bodyPaddingRight = 0;

    // --- Event Delegation ---
    if (gridContainer) {
      gridContainer.addEventListener("click", handleGridClick);
    }

    // Setup slider event listeners
    document.querySelectorAll(".slider-container").forEach((slider) => {
      slider.addEventListener("scroll", handleSliderScroll, { passive: true });
      setupTouchHandler(slider);
    });

    // Lightbox event handlers
    if (lightbox && lightboxClose) {
      lightboxClose.addEventListener("click", closeLightbox);
      lightbox.addEventListener("click", (e) => {
        if (e.target === lightbox) closeLightbox();
      });

      // Keyboard support
      document.addEventListener("keydown", (e) => {
        if (e.key === "Escape" && lightbox.getAttribute("aria-hidden") === "false") {
          closeLightbox();
        }
      });
    }

    // --- Core Functions ---

    // Event delegation for clicks
    function handleGridClick(e) {
      const target = e.target;

      // Find what was clicked
      const sliderButton = target.closest(".slider-button");
      const paginationDot = target.closest(".pagination-dot");
      const fullscreenButton = target.closest(".fullscreen-button");

      if (!sliderButton && !paginationDot && !fullscreenButton) return;

      // Find parent container
      const card = target.closest(".project-card");
      if (!card) return;

      // Handle different click types
      if (sliderButton) {
        e.preventDefault();
        const direction = parseInt(sliderButton.dataset.direction || "0", 10);
        const sliderContainer = card.querySelector(".slider-container");
        navigateSlider(sliderContainer, direction);
      } else if (paginationDot) {
        e.preventDefault();
        const index = parseInt(paginationDot.dataset.index || "0", 10);
        const sliderContainer = card.querySelector(".slider-container");
        goToSlide(sliderContainer, index);
      } else if (fullscreenButton) {
        e.preventDefault();
        const sliderContainer = card.querySelector(".slider-container");
        const currentIndex = Math.round(sliderContainer.scrollLeft / sliderContainer.clientWidth);
        const img = card.querySelectorAll(".slider-slide img")[currentIndex];
        if (img) openLightbox(img);
      }
    }

    // Slider scroll handler
    function handleSliderScroll(e) {
      const container = e.target;
      const card = container.closest(".project-card");
      if (!card) return;

      updateSliderIndicators(container);
    }

    // Update slider indicators (pagination dots and counter)
    function updateSliderIndicators(container) {
      const card = container.closest(".project-card");
      if (!card) return;

      const slideWidth = container.clientWidth;
      const activeIndex = Math.round(container.scrollLeft / slideWidth);

      // Update pagination dots
      const dots = card.querySelectorAll(".pagination-dot");
      dots.forEach((dot, i) => {
        dot.classList.toggle("active", i === activeIndex);
      });

      // Update counter
      const counter = card.querySelector(".current-slide");
      if (counter) counter.textContent = (activeIndex + 1).toString();

      // Mark current slide as active (for animations)
      const slides = container.querySelectorAll(".slider-slide");
      slides.forEach((slide, i) => {
        slide.classList.toggle("active", i === activeIndex);
      });
    }

    // Touch handling
    function setupTouchHandler(slider) {
      let startX = 0;
      let startY = 0;
      let isVerticalScroll = null;

      slider.addEventListener(
        "touchstart",
        (e) => {
          startX = e.touches[0].clientX;
          startY = e.touches[0].clientY;
          isVerticalScroll = null;
        },
        { passive: true }
      );

      slider.addEventListener(
        "touchmove",
        (e) => {
          if (isVerticalScroll === null) {
            const diffX = Math.abs(e.touches[0].clientX - startX);
            const diffY = Math.abs(e.touches[0].clientY - startY);
            isVerticalScroll = diffY > diffX;
          }

          // Only prevent default if this is a horizontal swipe
          if (!isVerticalScroll) {
            e.preventDefault();
          }
        },
        { passive: false }
      );

      slider.addEventListener(
        "touchend",
        (e) => {
          if (isVerticalScroll) return;

          const diffX = e.changedTouches[0].clientX - startX;

          // Only navigate if swipe was significant
          if (Math.abs(diffX) > 30) {
            navigateSlider(slider, diffX < 0 ? 1 : -1);
          }
        },
        { passive: true }
      );
    }

    // Navigation functions
    function navigateSlider(container, direction) {
      if (!container) return;

      const slideWidth = container.clientWidth;
      const totalSlides = parseInt(container.dataset.totalSlides || "1", 10);
      const currentIndex = Math.round(container.scrollLeft / slideWidth);
      let targetIndex = currentIndex + direction;

      // Boundary checks
      if (targetIndex < 0) targetIndex = 0;
      if (targetIndex >= totalSlides) targetIndex = totalSlides - 1;

      goToSlide(container, targetIndex);
    }

    function goToSlide(container, index) {
      if (!container) return;
      const slideWidth = container.clientWidth;

      container.scrollTo({
        left: slideWidth * index,
        behavior: "smooth",
      });
    }

    // Lightbox functions with improved scroll handling
    function openLightbox(img) {
      if (!lightbox || !lightboxImg) return;

      // Save scroll position and body state
      originalScrollPos = window.scrollY;
      const scrollbarWidth = window.innerWidth - document.documentElement.clientWidth;
      bodyPaddingRight = parseInt(getComputedStyle(document.body).paddingRight) || 0;

      // Update lightbox image
      lightboxImg.src = img.src;
      lightboxImg.alt = img.alt || "Project image";

      // Show lightbox with animation
      lightbox.setAttribute("aria-hidden", "false");

      // Prevent background scrolling but keep position
      document.body.style.top = `-${originalScrollPos}px`;
      document.body.style.paddingRight = `${bodyPaddingRight + scrollbarWidth}px`;
      document.body.classList.add("lightbox-open");
    }

    function closeLightbox() {
      if (!lightbox) return;

      // Hide lightbox with animation
      lightbox.setAttribute("aria-hidden", "true");

      // Restore scrolling and position
      document.body.classList.remove("lightbox-open");
      document.body.style.paddingRight = `${bodyPaddingRight}px`;
      document.body.style.top = "";
      window.scrollTo(0, originalScrollPos);

      // Clear src after closing for performance
      setTimeout(() => {
        if (lightboxImg) lightboxImg.src = "";
      }, 300);
    }
  });
</script>
