---
import { Icon } from "astro-icon/components";
import type { Project } from "./Project";
import "./project-showcase.css";
import TechPill from "./TechPill.astro";

// --- Define Your Projects Data with REAL image URLs ---
const projects: Project[] = [
  {
    title: "Portfolio Site V3",
    shortDescription: "This portfolio, built with Astro, showcasing interactive components and design.",
    imageUrls: [
      // Replace with actual relevant image URLs from Unsplash etc.
      "https://images.unsplash.com/photo-1517694712202-14dd9538aa97?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1170&q=80", // Code on screen
      "https://images.unsplash.com/photo-1555949963-ff9fe0c870eb?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1170&q=80", // Laptop showing website
      "https://images.unsplash.com/photo-1587620962725-abab7fe55159?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1031&q=80", // Abstract code lines
    ],
    techStack: ["Astro", "TailwindCSS", "TypeScript", "Vercel"],
    liveUrl: "#", // Link to the live site
    repoUrl: "https://github.com/yourusername/portfolio-v3", // Replace username
    imageLayout: "cover",
  },
  {
    title: "E-Commerce Platform",
    shortDescription: "Full-featured online store with user auth, cart, and checkout.",
    imageUrls: [
      "https://images.unsplash.com/photo-1522204523234-8729aa6e3d5f?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1170&q=80", // People shopping online
      "https://images.unsplash.com/photo-1585194166760-6090e40f094e?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1170&q=80", // UI closeup
      "https://images.unsplash.com/photo-1563013544-824ae1b704d3?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1170&q=80", // Credit card / payment
    ],
    techStack: ["React", "Next.js", "Firebase", "Stripe API", "TailwindCSS"],
    liveUrl: "#",
    repoUrl: "#",
    imageLayout: "cover",
  },
  {
    title: "Data Visualizer",
    shortDescription: "Interactive dashboard displaying complex data using charts.",
    imageUrls: [
      "https://images.unsplash.com/photo-1551288049-bebda4e38f71?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1170&q=80", // Dashboard screen
      "https://images.unsplash.com/photo-1611162617474-5b21e879e113?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1074&q=80", // Abstract data lines
      "https://images.unsplash.com/photo-1460925895917-afdab827c52f?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1115&q=80", // Graph on laptop
    ],
    techStack: ["SvelteKit", "D3.js", "Python", "FastAPI"],
    liveUrl: "#",
    repoUrl: "#",
    imageLayout: "cover",
  },
  // Add more projects...
];

function techNameToSlug(name: string): string {
  return name
    .toLowerCase()
    .replace(/\+/g, "plus") // Replace C++ with cplusplus
    .replace(/[^a-z0-9]/g, ""); // Remove non-alphanumeric chars
}
---

<section id="projects" class="py-20 md:py-28 scroll-mt-20">
  <div class="container mx-auto px-4">
    {/* Section Title */}
    <div class="text-center mb-12 md:mb-16">
      <h2 class="text-4xl md:text-5xl font-bold mb-3 inline-block bg-gradient-to-r from-[oklch(var(--accent-300))] to-[oklch(var(--accent-500))] text-transparent bg-clip-text">
        My <span class="font-doto font-bold">Creations</span>
      </h2>
      <div class="w-24 h-1 bg-gradient-to-r from-[oklch(var(--accent-500))] to-[oklch(var(--accent-900))] mx-auto rounded-full"></div>
      <p class="text-foreground-muted max-w-2xl mx-auto mt-6 text-lg">A selection of projects where code meets creativity.</p>
    </div>

    {/* Projects Grid */}
    <div id="project-grid-container" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 md:gap-10">
      {
        projects.map((project, index) => (
          <article class="project-card" data-aos="fade-up" data-aos-delay={index * 100}>
            {/* Slider Viewport */}
            <div class="slider-viewport">
              {/* Scroll Snap Container */}
              <div class="slider-container" data-total-slides={project.imageUrls.length}>
                {project.imageUrls.map((url, slideIndex) => (
                  <div class="slider-slide" data-slide-index={slideIndex}>
                    <img src={url} alt={`${project.title} screenshot ${slideIndex + 1}`} loading="lazy" width="800" height="500" />
                  </div>
                ))}
              </div>

              {/* Enhanced Slider Navigation - Only shown if multiple images */}
              {project.imageUrls.length > 1 && (
                <>
                  <button type="button" aria-label="Previous Slide" class="slider-button prev" data-direction="-1">
                    <Icon name="mdi:chevron-left" />
                  </button>
                  <button type="button" aria-label="Next Slide" class="slider-button next" data-direction="1">
                    <Icon name="mdi:chevron-right" />
                  </button>

                  {/* Pagination Dots */}
                  <div class="slider-pagination">
                    {project.imageUrls.map((_, i) => (
                      <button class={`pagination-dot ${i === 0 ? "active" : ""}`} data-index={i} aria-label={`Go to slide ${i + 1}`} title={`Slide ${i + 1}`} />
                    ))}
                  </div>

                  {/* Slide Counter */}
                  <div class="slide-counter">
                    <span class="current-slide">1</span>
                    <span class="total-slides">/{project.imageUrls.length}</span>
                  </div>
                </>
              )}

              {/* Fullscreen Button */}
              <button type="button" class="fullscreen-button" aria-label="View image fullscreen">
                <Icon name="mdi:fullscreen" />
              </button>
            </div>

            {/* Always Visible Project Info */}
            <div class="project-info">
              <h3 class="project-title">{project.title}</h3>
              <p class="project-description">{project.shortDescription}</p>

              {/* Tech Stack */}
              <div class="project-tech">
                <div class="flex flex-wrap gap-1.5">
                  {project.techStack.map((tech) => (
                    <TechPill name={tech} data-tech={techNameToSlug(tech)} />
                  ))}
                </div>
              </div>

              {/* Action Links */}
              <div class="project-links">
                {project.liveUrl && (
                  <a href={project.liveUrl} target="_blank" rel="noopener noreferrer" class="project-link" title="View live demo">
                    <Icon name="mdi:open-in-new" />
                    <span>View Project</span>
                  </a>
                )}
                {project.repoUrl && (
                  <a href={project.repoUrl} target="_blank" rel="noopener noreferrer" class="project-link" title="View source code">
                    <Icon name="mdi:github" />
                    <span>Source Code</span>
                  </a>
                )}
              </div>
            </div>
          </article>
        ))
      }
    </div>
  </div>
</section>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    // --- Intersection Observer for Card Entrance ---
    const cards = document.querySelectorAll("#project-grid-container .project-card");
    if (cards.length > 0 && typeof IntersectionObserver !== "undefined") {
      const observerCallback = (entries, _observer) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            entry.target.classList.add("is-visible");
          } else {
            entry.target.classList.remove("is-visible");
          }
        });
      };
      const observer = new IntersectionObserver(observerCallback, { threshold: 0.1 });
      cards.forEach((card) => observer.observe(card));
    } else {
      cards.forEach((card) => card.classList.add("is-visible"));
    }

    // --- Enhanced Slider Navigation ---
    const gridContainer = document.getElementById("project-grid-container");
    if (!gridContainer) return;

    // Button click handling
    gridContainer.addEventListener("click", (event) => {
      const target = event.target;
      const button = target.closest(".slider-button");
      const paginationDot = target.closest(".pagination-dot");
      const fullscreenButton = target.closest(".fullscreen-button");

      // Handle slider navigation buttons
      if (button) {
        const direction = parseInt(button.getAttribute("data-direction") || "0");
        const sliderContainer = button.closest(".project-card")?.querySelector(".slider-container");
        if (!sliderContainer || direction === 0) return;

        navigateSlider(sliderContainer, direction);
      }

      // Handle pagination dots
      else if (paginationDot) {
        const index = parseInt(paginationDot.getAttribute("data-index") || "0");
        const sliderContainer = paginationDot.closest(".project-card")?.querySelector(".slider-container");
        if (!sliderContainer) return;

        goToSlide(sliderContainer, index);
      }

      // Handle fullscreen button
      else if (fullscreenButton) {
        const card = fullscreenButton.closest(".project-card");
        const currentSlideIndex = getCurrentSlideIndex(card);
        const currentImage = card?.querySelectorAll(".slider-slide img")[currentSlideIndex];

        if (currentImage) {
          openLightbox(currentImage);
        }
      }
    });

    // --- Custom Navigation Functions ---
    function navigateSlider(container, direction) {
      const scrollAmount = container.clientWidth;
      const maxScroll = container.scrollWidth - container.clientWidth;
      const newScrollLeft = Math.min(Math.max(0, container.scrollLeft + scrollAmount * direction), maxScroll);

      container.scrollTo({ left: newScrollLeft, behavior: "smooth" });
    }

    function goToSlide(container, index) {
      const scrollAmount = container.clientWidth * index;
      container.scrollTo({ left: scrollAmount, behavior: "smooth" });
    }

    function getCurrentSlideIndex(card) {
      if (!card) return 0;

      const container = card.querySelector(".slider-container");
      if (!container) return 0;

      const slideWidth = container.clientWidth;
      const scrollPosition = container.scrollLeft;

      return Math.round(scrollPosition / slideWidth);
    }

    // Lightbox functionality for fullscreen
    function openLightbox(img) {
      const lightbox = document.createElement("div");
      lightbox.className = "image-lightbox";
      lightbox.innerHTML = `
        <div class="lightbox-content">
          <img src="${img.src}" alt="${img.alt || "Project image"}" />
          <button class="lightbox-close" aria-label="Close fullscreen view">&times;</button>
        </div>
      `;

      document.body.appendChild(lightbox);
      document.body.style.overflow = "hidden"; // Prevent scrolling

      // Close on click
      lightbox.addEventListener("click", (e) => {
        if (e.target === lightbox || e.target.closest(".lightbox-close")) {
          document.body.removeChild(lightbox);
          document.body.style.overflow = "";
        }
      });

      // Close on ESC key
      document.addEventListener("keydown", function closeOnEsc(e) {
        if (e.key === "Escape" && document.body.contains(lightbox)) {
          document.body.removeChild(lightbox);
          document.body.style.overflow = "";
          document.removeEventListener("keydown", closeOnEsc);
        }
      });
    }

    // --- Touch Swipe Support ---
    const sliders = document.querySelectorAll(".slider-container");
    sliders.forEach((slider) => {
      let touchStartX = 0;
      let touchEndX = 0;

      slider.addEventListener(
        "touchstart",
        (e) => {
          touchStartX = e.changedTouches[0].screenX;
        },
        { passive: true }
      );

      slider.addEventListener(
        "touchend",
        (e) => {
          touchEndX = e.changedTouches[0].screenX;
          handleSwipeGesture(slider, touchStartX, touchEndX);
        },
        { passive: true }
      );
    });

    function handleSwipeGesture(slider, startX, endX) {
      const threshold = 50; // Minimum distance for a swipe
      const diff = startX - endX;

      if (Math.abs(diff) < threshold) return; // Not a deliberate swipe

      // Direction: positive = right to left (next), negative = left to right (prev)
      const direction = diff > 0 ? 1 : -1;
      navigateSlider(slider, direction);
    }

    // --- Keyboard Navigation ---
    document.addEventListener("keydown", (e) => {
      // Only handle if a project card has focus
      const focusedCard = document.activeElement?.closest(".project-card");
      if (!focusedCard) return;

      const sliderContainer = focusedCard.querySelector(".slider-container");
      if (!sliderContainer) return;

      if (e.key === "ArrowLeft") {
        navigateSlider(sliderContainer, -1);
        e.preventDefault();
      } else if (e.key === "ArrowRight") {
        navigateSlider(sliderContainer, 1);
        e.preventDefault();
      }
    });

    // --- Update pagination on scroll ---
    sliders.forEach((container) => {
      const paginationDots = container.closest(".project-card")?.querySelectorAll(".pagination-dot");
      const currentSlideEl = container.closest(".project-card")?.querySelector(".current-slide");

      if (!paginationDots || paginationDots.length <= 1) return;

      // Initial update
      updateSliderIndicators(container, paginationDots, currentSlideEl);

      // Track scrolling with debounce
      let scrollTimeout = null;
      container.addEventListener("scroll", () => {
        if (scrollTimeout !== null) {
          clearTimeout(scrollTimeout);
        }
        scrollTimeout = window.setTimeout(() => {
          updateSliderIndicators(container, paginationDots, currentSlideEl);
        }, 100);
      });
    });

    function updateSliderIndicators(container, dots, currentSlideEl) {
      const scrollLeft = container.scrollLeft;
      const slideWidth = container.clientWidth;
      const activeIndex = Math.round(scrollLeft / slideWidth);

      // Update pagination dots
      dots.forEach((dot, index) => {
        if (index === activeIndex) {
          dot.classList.add("active");
        } else {
          dot.classList.remove("active");
        }
      });

      // Update slide counter if present
      if (currentSlideEl) {
        currentSlideEl.textContent = (activeIndex + 1).toString();
      }
    }

    // Set tabindex for keyboard navigation
    cards.forEach((card) => {
      card.setAttribute("tabindex", "0");
    });

    // Add lightbox styles dynamically
    const style = document.createElement("style");
    style.textContent = `
      .image-lightbox {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.9);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 9999;
        cursor: pointer;
      }
      .lightbox-content {
        position: relative;
        max-width: 90%;
        max-height: 90%;
      }
      .lightbox-content img {
        max-width: 100%;
        max-height: 90vh;
        object-fit: contain;
      }
      .lightbox-close {
        position: absolute;
        top: -2rem;
        right: -2rem;
        background: transparent;
        border: none;
        color: white;
        font-size: 2rem;
        cursor: pointer;
      }
    `;
    document.head.appendChild(style);
  });
</script>

<style>
  /* Base Card Styles */
  .project-card {
    display: flex;
    flex-direction: column;
    background-color: color-mix(in oklch, rgb(var(--background)), white 3%);
    border-radius: 0.75rem;
    box-shadow:
      0 4px 6px -1px rgb(0 0 0 / 0.1),
      0 2px 4px -2px rgb(0 0 0 / 0.1);
    overflow: hidden;
    transition: all 0.3s ease-out;
  }

  .project-card:hover,
  .project-card:focus-within {
    box-shadow:
      0 10px 20px -5px oklch(var(--accent-500) / 0.2),
      0 4px 6px -4px oklch(var(--accent-500) / 0.1);
    transform: translateY(-6px);
  }

  /* Improved Slider Styles */
  .slider-viewport {
    position: relative;
    overflow: hidden;
    aspect-ratio: 16 / 10;
    border-radius: 0.75rem 0.75rem 0 0;
  }

  .slider-container {
    overflow-x: scroll;
    scroll-snap-type: x mandatory;
    scroll-behavior: smooth;
    display: flex;
    height: 100%;
    scrollbar-width: none;
    -ms-overflow-style: none;
    position: relative;
    touch-action: pan-x; /* Improve touch handling */
  }

  .slider-container::-webkit-scrollbar {
    display: none;
  }

  .slider-slide {
    flex-shrink: 0;
    width: 100%;
    height: 100%;
    scroll-snap-align: start;
    position: relative;
  }

  .slider-slide img {
    display: block;
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.4s ease-out;
  }

  /* On hover image zoom effect */
  .project-card:hover .slider-slide img {
    transform: scale(1.05);
  }

  /* Always visible slider controls - but with opacity transitions */
  .slider-button {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    z-index: 10;
    background-color: rgba(0, 0, 0, 0.5);
    color: white;
    border: none;
    border-radius: 50%;
    width: 2.5rem;
    height: 2.5rem;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.2s ease-out;
    opacity: 0.7;
  }

  @media (min-width: 768px) {
    .slider-button {
      opacity: 0; /* Hide on desktop by default */
    }

    .slider-viewport:hover .slider-button,
    .slider-viewport:focus-within .slider-button {
      opacity: 0.7; /* Show on hover/focus */
    }
  }

  .slider-button:hover {
    background-color: rgba(0, 0, 0, 0.8);
    opacity: 1;
  }

  .slider-button.prev {
    left: 0.75rem;
  }

  .slider-button.next {
    right: 0.75rem;
  }

  .slider-button svg {
    width: 1.5rem;
    height: 1.5rem;
  }

  /* Improved pagination dots */
  .slider-pagination {
    position: absolute;
    bottom: 1rem;
    left: 50%;
    transform: translateX(-50%);
    z-index: 10;
    display: flex;
    gap: 0.5rem;
    padding: 0.25rem 0.75rem;
    border-radius: 1rem;
    background-color: rgba(0, 0, 0, 0.3);
    backdrop-filter: blur(4px);
    transition: opacity 0.3s ease-out;
  }

  @media (min-width: 768px) {
    .slider-pagination {
      opacity: 0; /* Hide on desktop by default */
    }

    .slider-viewport:hover .slider-pagination,
    .slider-viewport:focus-within .slider-pagination {
      opacity: 1; /* Show on hover */
    }
  }

  .pagination-dot {
    width: 0.5rem;
    height: 0.5rem;
    border: none;
    border-radius: 50%;
    padding: 0;
    background-color: rgba(255, 255, 255, 0.5);
    cursor: pointer;
    transition:
      transform 0.3s ease-out,
      background-color 0.3s ease-out;
  }

  .pagination-dot:hover {
    background-color: rgba(255, 255, 255, 0.8);
  }

  .pagination-dot.active {
    background-color: white;
    transform: scale(1.3);
  }

  /* Slide counter */
  .slide-counter {
    position: absolute;
    bottom: 1rem;
    right: 1rem;
    background-color: rgba(0, 0, 0, 0.6);
    color: white;
    padding: 0.25rem 0.5rem;
    border-radius: 1rem;
    font-size: 0.75rem;
    backdrop-filter: blur(4px);
    z-index: 10;
    transition: opacity 0.3s ease-out;
  }

  @media (min-width: 768px) {
    .slide-counter {
      opacity: 0;
    }

    .slider-viewport:hover .slide-counter,
    .slider-viewport:focus-within .slide-counter {
      opacity: 1;
    }
  }

  .current-slide {
    font-weight: 600;
  }

  .total-slides {
    opacity: 0.8;
  }

  /* Fullscreen button */
  .fullscreen-button {
    position: absolute;
    top: 1rem;
    right: 1rem;
    background-color: rgba(0, 0, 0, 0.5);
    color: white;
    border: none;
    border-radius: 50%;
    width: 2rem;
    height: 2rem;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    z-index: 10;
    transition: all 0.2s ease-out;
    opacity: 0;
  }

  .slider-viewport:hover .fullscreen-button,
  .slider-viewport:focus-within .fullscreen-button {
    opacity: 0.7;
  }

  .fullscreen-button:hover {
    background-color: rgba(0, 0, 0, 0.8);
    opacity: 1;
  }

  .fullscreen-button svg {
    width: 1.25rem;
    height: 1.25rem;
  }

  /* Always visible project info section */
  .project-info {
    padding: 1.25rem;
    background-color: color-mix(in oklch, rgb(var(--background)), white 1%);
    border-top: 1px solid rgba(var(--foreground), 0.08);
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
    position: relative; /* Changed from absolute to relative */
    bottom: auto; /* Remove absolute positioning */
    left: auto;
    right: auto;
    opacity: 1; /* Always visible */
    transform: none; /* No transform needed */
    transition: none; /* No transition needed */
  }

  .project-title {
    font-size: 1.25rem;
    font-weight: 600;
    color: rgb(var(--foreground));
    margin: 0;
    line-height: 1.3;
  }

  .project-description {
    font-size: 0.875rem;
    line-height: 1.5;
    color: rgb(var(--foreground-muted));
    margin: 0;
  }

  .project-tech {
    margin-top: 0.25rem;
  }

  .project-links {
    display: flex;
    gap: 1rem;
    margin-top: 0.5rem;
    flex-wrap: wrap;
    border-top: 1px solid rgba(var(--foreground), 0.08);
    padding-top: 0.75rem;
  }

  .project-link {
    display: inline-flex;
    align-items: center;
    gap: 0.375rem;
    padding: 0.375rem 0.75rem;
    border-radius: 0.375rem;
    font-size: 0.875rem;
    background-color: rgba(var(--foreground), 0.05);
    color: oklch(var(--accent-500));
    transition: all 0.2s ease-out;
    font-weight: 500;
  }

  .project-link:hover {
    background-color: oklch(var(--accent-500) / 0.1);
    color: oklch(var(--accent-500));
    transform: translateY(-1px);
  }

  .project-link svg {
    width: 1rem;
    height: 1rem;
  }

  /* Card entrance animations */
  .project-card {
    opacity: 0;
    transform: translateY(20px);
    transition:
      opacity 0.6s ease-out,
      transform 0.6s ease-out;
  }

  .project-card.is-visible {
    opacity: 1;
    transform: translateY(0);
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .slider-button {
      width: 2rem;
      height: 2rem;
      opacity: 0.85; /* More visible on mobile */
    }

    .slider-button svg {
      width: 1.25rem;
      height: 1.25rem;
    }

    .project-info {
      padding: 1rem;
    }

    /* Always show controls on mobile */
    .slider-pagination,
    .slide-counter {
      opacity: 1;
    }
  }
</style>
