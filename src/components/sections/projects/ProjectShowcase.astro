---
import { Icon } from "astro-icon/components";
import type { Project } from "./Project";
import "./project-showcase.css";
import TechPill from "./TechPill.astro";

// --- Define Your Projects Data with REAL image URLs ---
const projects: Project[] = [
  {
    title: "Portfolio Site V3",
    shortDescription: "This portfolio, built with Astro, showcasing interactive components and design.",
    imageUrls: [
      // Replace with actual relevant image URLs from Unsplash etc.
      "https://images.unsplash.com/photo-1517694712202-14dd9538aa97?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1170&q=80", // Code on screen
      "https://images.unsplash.com/photo-1555949963-ff9fe0c870eb?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1170&q=80", // Laptop showing website
      "https://images.unsplash.com/photo-1587620962725-abab7fe55159?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1031&q=80", // Abstract code lines
    ],
    techStack: ["Astro", "TailwindCSS", "TypeScript", "Vercel"],
    liveUrl: "#", // Link to the live site
    repoUrl: "https://github.com/yourusername/portfolio-v3", // Replace username
    imageLayout: "cover",
  },
  {
    title: "E-Commerce Platform",
    shortDescription: "Full-featured online store with user auth, cart, and checkout.",
    imageUrls: [
      "https://images.unsplash.com/photo-1522204523234-8729aa6e3d5f?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1170&q=80", // People shopping online
      "https://images.unsplash.com/photo-1585194166760-6090e40f094e?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1170&q=80", // UI closeup
      "https://images.unsplash.com/photo-1563013544-824ae1b704d3?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1170&q=80", // Credit card / payment
    ],
    techStack: ["React", "Next.js", "Firebase", "Stripe API", "TailwindCSS"],
    liveUrl: "#",
    repoUrl: "#",
    imageLayout: "cover",
  },
  {
    title: "Data Visualizer",
    shortDescription: "Interactive dashboard displaying complex data using charts.",
    imageUrls: [
      "https://images.unsplash.com/photo-1551288049-bebda4e38f71?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1170&q=80", // Dashboard screen
      "https://images.unsplash.com/photo-1611162617474-5b21e879e113?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1074&q=80", // Abstract data lines
      "https://images.unsplash.com/photo-1460925895917-afdab827c52f?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1115&q=80", // Graph on laptop
    ],
    techStack: ["SvelteKit", "D3.js", "Python", "FastAPI"],
    liveUrl: "#",
    repoUrl: "#",
    imageLayout: "cover",
  },
  // Add more projects...
];

function techNameToSlug(name: string): string {
  return name
    .toLowerCase()
    .replace(/\+/g, "plus") // Replace C++ with cplusplus
    .replace(/[^a-z0-9]/g, ""); // Remove non-alphanumeric chars
}
---

<section id="projects" class="py-20 md:py-28 scroll-mt-20">
  <div class="container mx-auto px-4">
    {/* Section Title */}
    <div class="text-center mb-12 md:mb-16">
      <h2 class="text-4xl md:text-5xl font-bold mb-3 inline-block bg-gradient-to-r from-[oklch(var(--accent-300))] to-[oklch(var(--accent-500))] text-transparent bg-clip-text">
        My <span class="font-doto font-bold">Creations</span>
      </h2>
      <div class="w-24 h-1 bg-gradient-to-r from-[oklch(var(--accent-500))] to-[oklch(var(--accent-900))] mx-auto rounded-full"></div>
      <p class="text-foreground-muted max-w-2xl mx-auto mt-6 text-lg">A selection of projects where code meets creativity.</p>
    </div>

    {/* Projects Grid */}
    <div id="project-grid-container" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 md:gap-10">
      {
        projects.map((project, index) => (
          <article class="project-card" data-aos="fade-up" data-aos-delay={index * 100}>
            {/* Slider Viewport */}
            <div class="slider-viewport">
              {/* Scroll Snap Container */}
              <div class="slider-container" data-total-slides={project.imageUrls.length}>
                {project.imageUrls.map((url, slideIndex) => (
                  <div class="slider-slide" data-slide-index={slideIndex}>
                    <img src={url} alt={`${project.title} screenshot ${slideIndex + 1}`} loading="lazy" width="800" height="500" />
                  </div>
                ))}
              </div>

              {/* Enhanced Slider Navigation - Only shown if multiple images */}
              {project.imageUrls.length > 1 && (
                <>
                  <button type="button" aria-label="Previous Slide" class="slider-button prev" data-direction="-1">
                    <Icon name="mdi:chevron-left" />
                  </button>
                  <button type="button" aria-label="Next Slide" class="slider-button next" data-direction="1">
                    <Icon name="mdi:chevron-right" />
                  </button>

                  {/* Pagination Dots */}
                  <div class="slider-pagination">
                    {project.imageUrls.map((_, i) => (
                      <button class={`pagination-dot ${i === 0 ? "active" : ""}`} data-index={i} aria-label={`Go to slide ${i + 1}`} title={`Slide ${i + 1}`} />
                    ))}
                  </div>

                  {/* Slide Counter */}
                  <div class="slide-counter">
                    <span class="current-slide">1</span>
                    <span class="total-slides">/{project.imageUrls.length}</span>
                  </div>
                </>
              )}

              {/* Fullscreen Button */}
              <button type="button" class="fullscreen-button" aria-label="View image fullscreen">
                <Icon name="mdi:fullscreen" />
              </button>
            </div>

            {/* Always Visible Project Info */}
            <div class="project-info">
              <h3 class="project-title">{project.title}</h3>
              <p class="project-description">{project.shortDescription}</p>

              {/* Tech Stack */}
              <div class="project-tech">
                <div class="flex flex-wrap gap-1.5">
                  {project.techStack.map((tech) => (
                    <TechPill name={tech} data-tech={techNameToSlug(tech)} />
                  ))}
                </div>
              </div>

              {/* Action Links */}
              <div class="project-links">
                {project.liveUrl && (
                  <a href={project.liveUrl} target="_blank" rel="noopener noreferrer" class="project-link" title="View live demo">
                    <Icon name="mdi:open-in-new" />
                    <span>View Project</span>
                  </a>
                )}
                {project.repoUrl && (
                  <a href={project.repoUrl} target="_blank" rel="noopener noreferrer" class="project-link" title="View source code">
                    <Icon name="mdi:github" />
                    <span>Source Code</span>
                  </a>
                )}
              </div>
            </div>
          </article>
        ))
      }
    </div>
  </div>
</section>

<script>
  // Define TypeScript interfaces
  interface SliderElements {
    container: HTMLElement;
    dots: NodeListOf<HTMLElement>;
    currentSlideEl: HTMLElement | null;
  }

  interface LightboxElements {
    lightbox: HTMLDivElement;
    closeButton: HTMLButtonElement;
    content: HTMLDivElement;
  }

  // Constants for better maintainability
  const SLIDER_THRESHOLD = 0.1;
  const SWIPE_THRESHOLD = 50;
  const DEBOUNCE_DELAY = 100;

  document.addEventListener("DOMContentLoaded", () => {
    // Cache DOM elements
    const gridContainer = document.getElementById("project-grid-container");
    const cards = Array.from(document.querySelectorAll<HTMLElement>("#project-grid-container .project-card"));
    const sliders = Array.from(document.querySelectorAll<HTMLElement>(".slider-container"));

    // --- Intersection Observer for Card Entrance ---
    const initIntersectionObserver = (): void => {
      if (!cards.length || !("IntersectionObserver" in window)) {
        cards.forEach((card) => card.classList.add("is-visible"));
        return;
      }

      const observerCallback: IntersectionObserverCallback = (entries) => {
        entries.forEach((entry) => {
          entry.target.classList.toggle("is-visible", entry.isIntersecting);
        });
      };

      const observer = new IntersectionObserver(observerCallback, {
        threshold: SLIDER_THRESHOLD,
        rootMargin: "0px 0px -100px 0px",
      });

      cards.forEach((card) => observer.observe(card));
    };

    // --- Slider Navigation System ---
    const handleSliderNavigation = (event: MouseEvent): void => {
      const target = event.target as HTMLElement;
      const button = target.closest<HTMLElement>(".slider-button");
      const paginationDot = target.closest<HTMLElement>(".pagination-dot");
      const fullscreenButton = target.closest<HTMLElement>(".fullscreen-button");

      if (button) {
        const direction = parseInt(button.dataset.direction || "0", 10);
        const sliderContainer = button.closest<HTMLElement>(".project-card")?.querySelector<HTMLElement>(".slider-container");
        if (sliderContainer && direction !== 0) {
          navigateSlider(sliderContainer, direction as 1 | -1);
        }
      } else if (paginationDot) {
        const index = parseInt(paginationDot.dataset.index || "0", 10);
        const sliderContainer = paginationDot.closest<HTMLElement>(".project-card")?.querySelector<HTMLElement>(".slider-container");
        if (sliderContainer) {
          goToSlide(sliderContainer, index);
        }
      } else if (fullscreenButton) {
        const card = fullscreenButton.closest<HTMLElement>(".project-card");
        const currentSlideIndex = getCurrentSlideIndex(card);
        const currentImage = card?.querySelectorAll<HTMLImageElement>(".slider-slide img")[currentSlideIndex];
        currentImage && openLightbox(currentImage);
      }
    };

    // --- Core Slider Functions ---
    const navigateSlider = (container: HTMLElement, direction: -1 | 1): void => {
      const scrollAmount = container.clientWidth * direction;
      const newScrollLeft = container.scrollLeft + scrollAmount;
      const maxScroll = container.scrollWidth - container.clientWidth;

      container.scrollTo({
        left: Math.max(0, Math.min(newScrollLeft, maxScroll)),
        behavior: "smooth",
      });
    };

    const goToSlide = (container: HTMLElement, index: number): void => {
      container.scrollTo({
        left: container.clientWidth * index,
        behavior: "smooth",
      });
    };

    const getCurrentSlideIndex = (card: HTMLElement | null): number => {
      const container = card?.querySelector<HTMLElement>(".slider-container");
      return container ? Math.round(container.scrollLeft / container.clientWidth) : 0;
    };

    // --- Slider Indicators Management ---
    const updateSliderIndicators = (container: HTMLElement, dots: NodeListOf<HTMLElement>, currentSlideEl: HTMLElement | null): void => {
      const activeIndex = Math.round(container.scrollLeft / container.clientWidth);

      dots.forEach((dot, index) => dot.classList.toggle("active", index === activeIndex));
      container.querySelectorAll(".slider-slide").forEach((slide, index) => {
        (slide as HTMLElement).classList.toggle("active", index === activeIndex);
      });

      if (currentSlideEl) {
        currentSlideEl.classList.add("changing");
        requestAnimationFrame(() => {
          currentSlideEl.textContent = `${activeIndex + 1}`;
          requestAnimationFrame(() => currentSlideEl.classList.remove("changing"));
        });
      }
    };

    // --- Lightbox System ---
    const createLightbox = (img: HTMLImageElement): LightboxElements => {
      const lightbox = document.createElement("div");
      lightbox.className = "image-lightbox";

      const content = document.createElement("div");
      content.className = "lightbox-content";

      const closeButton = document.createElement("button");
      closeButton.className = "lightbox-close";
      closeButton.innerHTML = "&times;";
      closeButton.setAttribute("aria-label", "Close fullscreen view");

      content.append(img.cloneNode(), closeButton);
      lightbox.append(content);

      return { lightbox, closeButton, content };
    };

    const openLightbox = (img: HTMLImageElement): void => {
      const { lightbox, closeButton, content } = createLightbox(img);
      document.body.append(lightbox);
      document.body.style.overflow = "hidden";

      const closeLightbox = (): void => {
        lightbox.style.animation = "lightbox-fade-out 0.3s forwards";
        setTimeout(() => {
          lightbox.remove();
          document.body.style.overflow = "";
        }, 300);
      };

      closeButton.addEventListener("click", closeLightbox);
      lightbox.addEventListener("click", (e) => e.target === lightbox && closeLightbox());
      document.addEventListener("keydown", function escHandler(e: KeyboardEvent) {
        if (e.key === "Escape") {
          closeLightbox();
          document.removeEventListener("keydown", escHandler);
        }
      });
    };

    // --- Touch Handling ---
    const handleSwipe = (slider: HTMLElement, startX: number, endX: number): void => {
      const diff = startX - endX;
      if (Math.abs(diff) < SWIPE_THRESHOLD) return;
      navigateSlider(slider, diff > 0 ? 1 : -1);
    };

    // --- Event Listeners Setup ---
    const setupEventListeners = (): void => {
      gridContainer?.addEventListener("click", handleSliderNavigation);

      sliders.forEach((slider) => {
        let touchStartX = 0;

        slider.addEventListener(
          "touchstart",
          (e) => {
            touchStartX = e.touches[0].clientX;
          },
          { passive: true }
        );

        slider.addEventListener(
          "touchend",
          (e) => {
            handleSwipe(slider, touchStartX, e.changedTouches[0].clientX);
          },
          { passive: true }
        );

        const parentCard = slider.closest<HTMLElement>(".project-card");
        const elements: SliderElements = {
          container: slider,
          dots: parentCard?.querySelectorAll(".pagination-dot") || ([] as unknown as NodeListOf<HTMLElement>),
          currentSlideEl: parentCard?.querySelector(".current-slide") ?? null,
        };

        let scrollTimeout: number;
        slider.addEventListener("scroll", () => {
          window.clearTimeout(scrollTimeout);
          scrollTimeout = window.setTimeout(() => {
            updateSliderIndicators(elements.container, elements.dots, elements.currentSlideEl);
          }, DEBOUNCE_DELAY);
        });
      });

      document.addEventListener("keydown", (e) => {
        const focusedCard = document.activeElement?.closest<HTMLElement>(".project-card");
        const sliderContainer = focusedCard?.querySelector<HTMLElement>(".slider-container");
        if (!sliderContainer) return;

        if (e.key === "ArrowLeft") navigateSlider(sliderContainer, -1);
        if (e.key === "ArrowRight") navigateSlider(sliderContainer, 1);
      });
    };

    // --- Initialization ---
    initIntersectionObserver();
    setupEventListeners();
    addLightboxStyles();

    // --- Style Injection (Singleton) ---
    function addLightboxStyles(): void {
      if (document.querySelector("#lightbox-styles")) return;

      const style = document.createElement("style");
      style.textContent = `
      .image-lightbox {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.9);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 9999;
        cursor: pointer;
      }
      .lightbox-content {
        position: relative;
        max-width: 90%;
        max-height: 90%;
      }
      .lightbox-content img {
        max-width: 100%;
        max-height: 90vh;
        object-fit: contain;
      }
      .lightbox-close {
        position: absolute;
        top: -2rem;
        right: -2rem;
        background: transparent;
        border: none;
        color: white;
        font-size: 2rem;
        cursor: pointer;
      }
    `;
      document.head.append(style);
    }
  });
</script>
