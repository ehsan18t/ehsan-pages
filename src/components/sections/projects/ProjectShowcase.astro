---
import { Icon } from "astro-icon/components";
import TechPill from "./TechPill.astro";
import "./project-showcase.css";

export interface Project {
  title: string;
  shortDescription: string;
  imageUrls: string[];
  techStack: string[];
  liveUrl?: string;
  repoUrl?: string;
  imageLayout?: "cover" | "contain";
  backgroundStyle?: string;
  layout?: string;
}

const projects: Project[] = [
  {
    title: "Portfolio Site V3",
    shortDescription: "This portfolio, built with Astro, showcasing interactive components and design.",
    imageUrls: [
      "https://images.unsplash.com/photo-1517694712202-14dd9538aa97?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1170&q=80",
      "https://images.unsplash.com/photo-1555949963-ff9fe0c870eb?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1170&q=80",
      "https://images.unsplash.com/photo-1587620962725-abab7fe55159?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1031&q=80",
    ],
    techStack: ["Astro", "TailwindCSS", "TypeScript", "Vercel"],
    liveUrl: "#",
    repoUrl: "https://github.com/yourusername/portfolio-v3",
    imageLayout: "cover",
  },
  {
    title: "E-Commerce Platform",
    shortDescription: "Full-featured online store with user auth, cart, and checkout.",
    imageUrls: [
      "https://images.unsplash.com/photo-1522204523234-8729aa6e3d5f?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1170&q=80",
      "https://images.unsplash.com/photo-1585194166760-6090e40f094e?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1170&q=80",
      "https://images.unsplash.com/photo-1563013544-824ae1b704d3?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1170&q=80",
    ],
    techStack: ["React", "Next.js", "Firebase", "Stripe API", "TailwindCSS"],
    liveUrl: "#",
    repoUrl: "#",
    imageLayout: "cover",
  },
  {
    title: "Data Visualizer",
    shortDescription: "Interactive dashboard displaying complex data using charts.",
    imageUrls: [
      "https://images.unsplash.com/photo-1551288049-bebda4e38f71?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1170&q=80",
      "https://images.unsplash.com/photo-1611162617474-5b21e879e113?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1074&q=80",
      "https://images.unsplash.com/photo-1460925895917-afdab827c52f?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1115&q=80",
    ],
    techStack: ["SvelteKit", "D3.js", "Python", "FastAPI"],
    liveUrl: "#",
    repoUrl: "#",
    imageLayout: "cover",
  },
];

function techNameToSlug(name: string): string {
  return name
    .toLowerCase()
    .replace(/\+/g, "plus")
    .replace(/[^a-z0-9]/g, "");
}
---

<section id="projects" class="py-20 md:py-28 scroll-mt-20">
  <div class="container mx-auto px-4">
    <div class="text-center mb-12 md:mb-16">
      <h2 class="text-4xl md:text-5xl font-bold mb-3 inline-block bg-gradient-to-r from-[oklch(var(--accent-300))] to-[oklch(var(--accent-500))] text-transparent bg-clip-text">
        My <span class="font-doto font-bold">Creations</span>
      </h2>
      <div class="w-24 h-1 bg-gradient-to-r from-[oklch(var(--accent-500))] to-[oklch(var(--accent-900))] mx-auto rounded-full"></div>
      <p class="text-foreground-muted max-w-2xl mx-auto mt-6 text-lg">A selection of projects where code meets creativity.</p>
    </div>

    <div id="project-grid-container" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 md:gap-10">
      {
        projects.map((project, index) => (
          <article class="project-card" data-aos="fade-up" data-aos-delay={index * 100}>
            <div class="slider-viewport">
              <div class="slider-container" data-total-slides={project.imageUrls.length}>
                {project.imageUrls.map((url, slideIndex) => (
                  <div class="slider-slide" data-slide-index={slideIndex}>
                    <img src={url} alt={`${project.title} screenshot ${slideIndex + 1}`} loading="lazy" width="800" height="500" />
                  </div>
                ))}
              </div>

              {project.imageUrls.length > 1 && (
                <>
                  <button type="button" aria-label="Previous Slide" class="slider-button prev" data-direction="-1">
                    <Icon name="mdi:chevron-left" />
                  </button>
                  <button type="button" aria-label="Next Slide" class="slider-button next" data-direction="1">
                    <Icon name="mdi:chevron-right" />
                  </button>

                  <div class="slider-pagination">
                    {project.imageUrls.map((_, i) => (
                      <button class={`pagination-dot ${i === 0 ? "active" : ""}`} data-index={i} aria-label={`Go to slide ${i + 1}`} title={`Slide ${i + 1}`} />
                    ))}
                  </div>

                  <div class="slide-counter">
                    <span class="current-slide">1</span>
                    <span class="total-slides">/{project.imageUrls.length}</span>
                  </div>
                </>
              )}

              <button type="button" class="fullscreen-button" aria-label="View image fullscreen">
                <Icon name="mdi:fullscreen" />
              </button>
            </div>

            <div class="project-info">
              <h3 class="project-title">{project.title}</h3>
              <p class="project-description">{project.shortDescription}</p>

              <div class="project-tech">
                <div class="flex flex-wrap gap-1.5">
                  {project.techStack.map((tech) => (
                    <TechPill name={tech} data-tech={techNameToSlug(tech)} />
                  ))}
                </div>
              </div>

              <div class="project-links">
                {project.liveUrl && (
                  <a href={project.liveUrl} target="_blank" rel="noopener noreferrer" class="project-link" title="View live demo">
                    <Icon name="mdi:open-in-new" />
                    <span>View Project</span>
                  </a>
                )}
                {project.repoUrl && (
                  <a href={project.repoUrl} target="_blank" rel="noopener noreferrer" class="project-link" title="View source code">
                    <Icon name="mdi:github" />
                    <span>Source Code</span>
                  </a>
                )}
              </div>
            </div>
          </article>
        ))
      }
    </div>
  </div>
</section>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const gridContainer = document.getElementById("project-grid-container");
    const cards = Array.from(document.querySelectorAll(".project-card"));
    const sliders = Array.from(document.querySelectorAll(".slider-container"));

    if ("IntersectionObserver" in window) {
      const observer = new IntersectionObserver(
        (entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              entry.target.classList.add("is-visible");
              observer.unobserve(entry.target);
            }
          });
        },
        { threshold: 0.1, rootMargin: "0px 0px -100px 0px" }
      );

      cards.forEach((card) => observer.observe(card));
    } else {
      cards.forEach((card) => card.classList.add("is-visible"));
    }

    if (gridContainer) {
      gridContainer.addEventListener("click", (e: any) => {
        const target = e.target;

        const button = target.closest(".slider-button");
        const paginationDot = target.closest(".pagination-dot");
        const fullscreenButton = target.closest(".fullscreen-button");

        if (!button && !paginationDot && !fullscreenButton) return;

        const card = button?.closest(".project-card") || paginationDot?.closest(".project-card") || fullscreenButton?.closest(".project-card");

        if (!card) return;

        if (button) {
          const direction = parseInt(button.dataset.direction || "0", 10);
          const sliderContainer = card.querySelector(".slider-container");
          if (sliderContainer && (direction === 1 || direction === -1)) {
            e.preventDefault();
            navigateSlider(sliderContainer, direction);
          }
        } else if (paginationDot) {
          const index = parseInt(paginationDot.dataset.index || "0", 10);
          const sliderContainer = card.querySelector(".slider-container");
          if (sliderContainer) {
            e.preventDefault();
            goToSlide(sliderContainer, index);
          }
        } else if (fullscreenButton) {
          e.preventDefault();
          const currentIndex = getCurrentSlideIndex(card);
          const currentImage = card.querySelectorAll(".slider-slide img")[currentIndex];
          if (currentImage) {
            openLightbox(currentImage);
          }
        }
      });
    }

    sliders.forEach((slider: any) => {
      let touchStartX = 0;
      let touchStartY = 0;
      let isSwiping = false;
      let preventScroll = false;

      slider.addEventListener(
        "touchstart",
        (e: any) => {
          touchStartX = e.touches[0].clientX;
          touchStartY = e.touches[0].clientY;
          isSwiping = false;
          preventScroll = false;
        },
        { passive: true }
      );

      slider.addEventListener(
        "touchmove",
        (e: any) => {
          if (preventScroll) {
            e.preventDefault();
          }

          if (!isSwiping) {
            const touchMoveX = e.touches[0].clientX;
            const touchMoveY = e.touches[0].clientY;
            const diffX = Math.abs(touchMoveX - touchStartX);
            const diffY = Math.abs(touchMoveY - touchStartY);

            if (diffX > diffY && diffX > 10) {
              isSwiping = true;
              preventScroll = true;
            }
          }
        },
        { passive: false }
      );

      slider.addEventListener(
        "touchend",
        (e: any) => {
          if (isSwiping) {
            const touchEndX = e.changedTouches[0].clientX;
            const diffX = touchStartX - touchEndX;

            if (Math.abs(diffX) > 30) {
              navigateSlider(slider, diffX > 0 ? 1 : -1);
            }
          }
        },
        { passive: true }
      );

      setupSliderScrollHandling(slider);
    });

    function navigateSlider(container: any, direction: any) {
      const slideWidth = container.clientWidth;
      const currentScrollLeft = container.scrollLeft;
      const targetScrollLeft = currentScrollLeft + slideWidth * direction;

      container.scrollTo({
        left: targetScrollLeft,
        behavior: "smooth",
      });
    }

    function goToSlide(container: any, index: number) {
      container.scrollTo({
        left: container.clientWidth * index,
        behavior: "smooth",
      });
    }

    function getCurrentSlideIndex(card: any) {
      const container = card.querySelector(".slider-container");
      return container ? Math.round(container.scrollLeft / container.clientWidth) : 0;
    }

    function setupSliderScrollHandling(slider: any) {
      let ticking = false;

      slider.addEventListener(
        "scroll",
        () => {
          if (!ticking) {
            window.requestAnimationFrame(() => {
              updateSliderIndicators(slider);
              ticking = false;
            });
            ticking = true;
          }
        },
        { passive: true }
      );

      updateSliderIndicators(slider);
    }

    function updateSliderIndicators(container: any) {
      const card = container.closest(".project-card");
      if (!card) return;

      const dots = card.querySelectorAll(".pagination-dot");
      const currentSlideEl = card.querySelector(".current-slide");
      const activeIndex = Math.round(container.scrollLeft / container.clientWidth);

      dots.forEach((dot: any, i: number) => {
        dot.classList.toggle("active", i === activeIndex);
      });

      if (currentSlideEl) {
        currentSlideEl.textContent = `${activeIndex + 1}`;
      }

      const slides = container.querySelectorAll(".slider-slide");
      slides.forEach((slide: any, i: number) => {
        slide.classList.toggle("active", i === activeIndex);
      });
    }

    function openLightbox(img: any) {
      const lightbox = document.createElement("div");
      lightbox.className = "image-lightbox";

      const content = document.createElement("div");
      content.className = "lightbox-content";

      const imgClone = img.cloneNode(false);

      const closeBtn = document.createElement("button");
      closeBtn.className = "lightbox-close";
      closeBtn.innerHTML = "&times;";
      closeBtn.setAttribute("aria-label", "Close fullscreen view");

      content.appendChild(imgClone);
      content.appendChild(closeBtn);
      lightbox.appendChild(content);
      document.body.appendChild(lightbox);

      document.body.style.overflow = "hidden";

      function closeLightbox() {
        lightbox.style.opacity = "0";
        setTimeout(() => {
          document.body.removeChild(lightbox);
          document.body.style.overflow = "";
        }, 300);
      }

      closeBtn.addEventListener("click", closeLightbox, { once: true });
      lightbox.addEventListener("click", (e) => {
        if (e.target === lightbox) closeLightbox();
      });

      const escHandler = (e: any) => {
        if (e.key === "Escape") {
          closeLightbox();
          document.removeEventListener("keydown", escHandler);
        }
      };
      document.addEventListener("keydown", escHandler);
    }

    if (!document.getElementById("lightbox-styles")) {
      const style = document.createElement("style");
      style.id = "lightbox-styles";
      style.textContent = `
        .image-lightbox {
          position: fixed;
          top: 0;
          left: 0;
          width: 100%;
          height: 100%;
          background: rgba(0, 0, 0, 0.9);
          display: flex;
          align-items: center;
          justify-content: center;
          z-index: 9999;
          cursor: pointer;
          transition: opacity 0.3s;
        }
        .lightbox-content {
          position: relative;
          max-width: 90%;
          max-height: 90%;
        }
        .lightbox-content img {
          max-width: 100%;
          max-height: 90vh;
          object-fit: contain;
        }
        .lightbox-close {
          position: absolute;
          top: -2rem;
          right: -2rem;
          background: transparent;
          border: none;
          color: white;
          font-size: 2rem;
          cursor: pointer;
        }
      `;
      document.head.appendChild(style);
    }
  });
</script>
