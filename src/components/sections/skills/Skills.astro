---
// src/components/SkillBloom.astro
import { Icon } from "astro-icon/components";

// 1. Define Skill Categories and Skills
const skillGroups = [
  {
    category: "Web Frontend",
    // Using accent colors from your theme for categories
    color: "oklch(var(--accent-300))",
    icon: "mdi:web", // Example category icon
    skills: [
      { name: "HTML", icon: "simple-icons:html5" },
      { name: "CSS", icon: "simple-icons:css3" },
      { name: "JavaScript", icon: "simple-icons:javascript" },
      { name: "TypeScript", icon: "simple-icons:typescript" },
      { name: "React", icon: "simple-icons:react" },
      { name: "NextJS", icon: "simple-icons:nextdotjs" },
      { name: "Svelte", icon: "simple-icons:svelte" },
      { name: "Redux", icon: "simple-icons:redux" },
      { name: "TailwindCSS", icon: "simple-icons:tailwindcss" },
      { name: "Astro", icon: "simple-icons:astro" },
    ],
  },
  {
    category: "Backend & Data",
    color: "oklch(var(--accent-500))", // Different accent
    icon: "mdi:database",
    skills: [
      { name: "Django", icon: "simple-icons:django" },
      { name: "PHP", icon: "simple-icons:php" },
      { name: "SQL", icon: "simple-icons:postgresql" },
      { name: "Firebase", icon: "simple-icons:firebase" },
      // { name: "Node.js", icon: "simple-icons:nodedotjs" }, // Example if you add later
    ],
  },
  {
    category: "Core Languages",
    color: "oklch(var(--accent-900))", // Another accent
    icon: "mdi:code-braces",
    skills: [
      { name: "Python", icon: "simple-icons:python" },
      { name: "Java", icon: "simple-icons:openjdk" }, // Changed icon
      { name: "C/C++", icon: "simple-icons:cplusplus" },
    ],
  },
  {
    category: "Tools & Systems",
    color: "oklch(var(--secondary))", // Using secondary color
    icon: "mdi:tools",
    skills: [
      { name: "Git", icon: "simple-icons:git" },
      { name: "GitHub", icon: "simple-icons:github" },
      { name: "Linux", icon: "simple-icons:linux" },
      { name: "Bash", icon: "simple-icons:gnubash" },
      { name: "Batch", icon: "simple-icons:windowsterminal" },
      { name: "Figma", icon: "simple-icons:figma" },
      { name: "Vim", icon: "simple-icons:vim" },
      // { name: "Docker", icon: "simple-icons:docker" }, // Example
    ],
  },
  {
    category: "Workflow & Process",
    color: "oklch(var(--foreground-muted))", // Muted color
    icon: "mdi:clipboard-check-multiple-outline",
    skills: [
      { name: "GitHub Actions", icon: "simple-icons:githubactions" },
      { name: "Jira", icon: "simple-icons:jira" },
      { name: "Scrum", icon: "simple-icons:scrumalliance" }, // Placeholder icon
      { name: "LaTeX", icon: "simple-icons:latex" },
      { name: "Markdown", icon: "simple-icons:markdown" },
      { name: "Googling", icon: "simple-icons:google" },
    ],
  },
];

// 2. Calculate bloom positions for each skill
const bloomRadius = 130; // px - How far skills bloom outwards (TUNE THIS)
const baseDelay = 0.06; // seconds - Stagger delay multiplier (TUNE THIS)

skillGroups.forEach((group) => {
  const N = group.skills.length;
  group.skills.forEach((skill, index) => {
    // Calculate angle for even distribution on a circle
    // Add a small offset (-Math.PI / 2) to start blooming from the top
    const angle = (index / N) * 2 * Math.PI - Math.PI / 2;
    // Calculate the X and Y translation needed from the center
    skill.bloomTx = Math.cos(angle) * bloomRadius;
    skill.bloomTy = Math.sin(angle) * bloomRadius;
    // Calculate staggered delay
    skill.bloomDelay = index * baseDelay;
  });
});
---

<section id="skills-bloom" class="py-24">
  <div class="container mx-auto px-4">
    <div class="text-center mb-16">
      <h2 class="text-4xl md:text-5xl font-bold mb-3 inline-block bg-gradient-to-r from-[oklch(var(--accent-300))] to-[oklch(var(--accent-500))] text-transparent bg-clip-text">Skill <span class="font-doto font-bold"> Clusters</span></h2>
      <div class="w-24 h-1 bg-gradient-to-r from-[oklch(var(--accent-500))] to-[oklch(var(--accent-900))] mx-auto rounded-full"></div>
      <p class="text-foreground-muted max-w-2xl mx-auto mt-6 text-lg">Hover over a category to see the related skills bloom outwards.</p>
    </div>

    <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-12 md:gap-16 place-items-center">
      {
        skillGroups.map((group) => (
          <div class="category-wrapper group relative" style={`--category-color: ${group.color};`}>
            <div class="category-bubble relative flex flex-col items-center justify-center w-36 h-36 md:w-40 md:h-40 rounded-full border-2 border-[color:rgba(var(--foreground)/0.1)] bg-[color:rgba(var(--background)/0.7)] backdrop-blur-md shadow-lg cursor-default transition-all duration-300 group-hover:border-[var(--category-color)] group-hover:scale-105 z-10">
              <div class="text-4xl mb-1 text-[var(--category-color)] transition-transform duration-300 group-hover:scale-110">{group.icon && <Icon name={group.icon} />}</div>
              <h3 class="text-sm font-semibold text-center px-2">{group.category}</h3>
            </div>

            {group.skills.map((skill) => (
              <div class="skill-bubble absolute top-1/2 left-1/2" style={`--bloom-tx: ${skill.bloomTx}px; --bloom-ty: ${skill.bloomTy}px; --bloom-delay: ${skill.bloomDelay}s; --color: var(--category-color);`} title={skill.name} { /* Tooltip for accessibility */ }>
                {/* Reusing your bubble structure */}
                <div class="skill-icon">
                  <Icon name={skill.icon} />
                </div>
                <div class="skill-name">{skill.name}</div>
              </div>
            ))}
          </div>
        ))
      }
    </div>
  </div>
</section>

<style>
  .category-wrapper {
    /* Ensure enough space around for blooming */
    min-width: calc(130px * 2 + 160px); /* Approx (bloomRadius * 2 + category bubble width) */
    min-height: calc(130px * 2 + 160px);
    display: flex;
    justify-content: center;
    align-items: center;
  }

  /* Inherit styles for .skill-bubble, .skill-icon, .skill-name from your global CSS or previous component style block if needed */
  /* The key parts are the initial state and the hover transition */

  .skill-bubble {
    width: 80px; /* Slightly smaller */
    height: 80px;
    border-radius: 50%;
    background: rgba(var(--background), 0.8); /* Slightly more opaque */
    backdrop-filter: blur(4px);
    border: 1px solid rgba(255, 255, 255, 0.1);
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    box-shadow: 0 2px 10px -3px rgba(0, 0, 0, 0.4);
    padding: 8px;
    position: absolute; /* Crucial */
    overflow: hidden;
    cursor: default;
    color: rgb(var(--foreground)); /* Default text color */

    /* --- Initial State (Hidden at Center) --- */
    opacity: 0;
    /* Start centered within the category bubble and scaled down */
    transform: translate(-50%, -50%) scale(0);
    pointer-events: none;
    z-index: 1; /* Below category bubble */
    /* Define transition for bloom effect */
    transition:
      transform 0.4s cubic-bezier(0.34, 1.56, 0.64, 1),
      opacity 0.3s ease-out; /* Bouncy exit easing */
    /* Apply individual delay calculated in frontmatter */
    transition-delay: var(--bloom-delay, 0s);
  }

  /* --- Bloom State (Triggered by hovering the PARENT .category-wrapper) --- */
  .category-wrapper:hover .skill-bubble {
    opacity: 1;
    /* Move to calculated bloom position and scale up */
    transform: translate(-50%, -50%) translate(var(--bloom-tx, 0px), var(--bloom-ty, 0px)) scale(1);
    pointer-events: auto; /* Allow hover on skills */
  }

  /* --- Skill Bubble Hover Effects (Apply when bloomed) --- */
  .skill-bubble:hover {
    border-color: var(--color);
    /* Apply hover scale relative to the bloomed position */
    transform: translate(-50%, -50%) translate(var(--bloom-tx, 0px), var(--bloom-ty, 0px)) scale(1.15);
    box-shadow: 0 6px 20px -5px rgba(0, 0, 0, 0.5);
    z-index: 20; /* Bring hovered skill to front */
    /* Keep transition for hover effect smooth */
    transition:
      transform 0.2s ease-out,
      border-color 0.2s ease-out,
      box-shadow 0.2s ease-out;
    transition-delay: 0s !important; /* Override bloom delay for immediate hover feedback */
  }

  .skill-bubble .skill-icon {
    font-size: 1.6rem;
    margin-bottom: 4px;
    color: var(--color, oklch(var(--accent-text)));
    transition: transform 0.2s ease;
  }

  .skill-bubble .skill-name {
    font-size: 0.65rem; /* Smaller text */
    font-weight: 500;
    line-height: 1.1;
    text-align: center;
    opacity: 0.8;
    transition: opacity 0.2s ease;
  }

  .skill-bubble:hover .skill-icon {
    transform: scale(1.1);
  }

  .skill-bubble:hover .skill-name {
    opacity: 1;
  }

  /* Optional: Subtle glow on skill bubble using pseudo-element */
  .skill-bubble::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: radial-gradient(circle at center, var(--color) 0%, transparent 70%);
    opacity: 0;
    transition: opacity 0.3s ease;
    z-index: -1;
  }

  .skill-bubble:hover::before {
    opacity: 0.1;
  }
</style>
