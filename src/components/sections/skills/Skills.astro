---
// Skills.astro - Modern Dashboard Layout
import { Icon } from "astro-icon/components";

// Group skills by category
const skillGroups = [
  {
    category: "Languages",
    color: "oklch(var(--accent-300))",
    skills: [
      { name: "JavaScript", icon: "simple-icons:javascript" },
      { name: "HTML", icon: "simple-icons:html5" },
      { name: "CSS", icon: "simple-icons:css3" },
      { name: "TypeScript", icon: "simple-icons:typescript" },
      { name: "Python", icon: "simple-icons:python" },
      { name: "C/C++", icon: "simple-icons:cplusplus" },
      { name: "Java", icon: "simple-icons:coffeescript" },
      { name: "PHP", icon: "simple-icons:php" },
      { name: "SQL", icon: "simple-icons:postgresql" },
    ],
  },
  {
    category: "Frameworks & Libraries",
    color: "oklch(var(--accent-500))",
    skills: [
      { name: "React", icon: "simple-icons:react" },
      { name: "NextJS", icon: "simple-icons:nextdotjs" },
      { name: "Svelte", icon: "simple-icons:svelte" },
      { name: "Redux", icon: "simple-icons:redux" },
      { name: "TailwindCSS", icon: "simple-icons:tailwindcss" },
      { name: "Astro", icon: "simple-icons:astro" },
      { name: "Django", icon: "simple-icons:django" },
      { name: "Firebase", icon: "simple-icons:firebase" },
    ],
  },
  {
    category: "Tools & Environments",
    color: "oklch(var(--accent-900))",
    skills: [
      { name: "Git", icon: "simple-icons:git" },
      { name: "GitHub", icon: "simple-icons:github" },
      { name: "Linux", icon: "simple-icons:linux" },
      { name: "Bash", icon: "simple-icons:gnubash" },
      { name: "Batch", icon: "simple-icons:windowsterminal" },
      { name: "Vim", icon: "simple-icons:vim" },
      { name: "Figma", icon: "simple-icons:figma" },
      { name: "LaTeX", icon: "simple-icons:latex" },
      { name: "Markdown", icon: "simple-icons:markdown" },
      { name: "GitHub Actions", icon: "simple-icons:githubactions" },
      { name: "Jira", icon: "simple-icons:jira" },
      { name: "Scrum", icon: "simple-icons:scrumalliance" },
      { name: "Googling", icon: "simple-icons:google" },
    ],
  },
];
---

<section id="skills" class="py-24 relative overflow-hidden">
  <!-- Accent elements in background -->
  <div class="absolute inset-0 pointer-events-none">
    <div class="hero-ring w-[120%] aspect-square opacity-10"></div>
    <div class="hero-ring w-[80%] aspect-square opacity-5"></div>
  </div>

  <div class="container mx-auto px-4 relative z-10">
    <div class="text-center mb-16">
      <h2 class="text-4xl md:text-5xl font-bold mb-3 inline-block bg-gradient-to-r from-[oklch(var(--accent-300))] to-[oklch(var(--accent-500))] text-transparent bg-clip-text">Technical <span class="font-doto font-bold"> Skills</span></h2>
      <div class="w-24 h-1 bg-gradient-to-r from-[oklch(var(--accent-500))] to-[oklch(var(--accent-900))] mx-auto rounded-full"></div>
      <p class="text-foreground-muted max-w-2xl mx-auto mt-6 text-lg">A collection of technologies I've worked with</p>
    </div>

    <!-- Skills dashboard -->
    <div class="skills-dashboard">
      <!-- Category tabs -->
      <div class="skills-tabs">
        {
          skillGroups.map((group, index) => (
            <button class={`tab-button ${index === 0 ? "active" : ""}`} data-tab={index} style={`--tab-color: ${group.color}`}>
              {group.category}
            </button>
          ))
        }
      </div>

      <!-- Skills content -->
      <div class="skills-content">
        {
          skillGroups.map((group, index) => (
            <div class={`skills-panel ${index === 0 ? "active" : ""}`} data-tab={index} style={`--panel-color: ${group.color}`}>
              <div class="skills-grid">
                {group.skills.map((skill, skillIndex) => (
                  <div class="skill-card" style={`--delay: ${skillIndex * 0.05}s; --skill-color: ${group.color}`}>
                    <div class="skill-card-inner">
                      <div class="skill-icon">
                        <Icon name={skill.icon} />
                      </div>
                      <div class="skill-name">{skill.name}</div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          ))
        }
      </div>
    </div>
  </div>
</section>

<style>
  .skills-dashboard {
    max-width: 1000px;
    margin: 0 auto;
    background: rgba(var(--background), 0.5);
    backdrop-filter: blur(10px);
    border-radius: 24px;
    box-shadow:
      0 20px 40px rgba(0, 0, 0, 0.1),
      0 0 0 1px rgba(var(--foreground), 0.05);
    overflow: hidden;
  }

  /* Tab navigation */
  .skills-tabs {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    border-bottom: 1px solid rgba(var(--foreground), 0.1);
  }

  .tab-button {
    padding: 20px;
    font-size: 1rem;
    font-weight: 600;
    text-align: center;
    background: transparent;
    color: rgb(var(--foreground-muted));
    border: none;
    position: relative;
    transition: all 0.3s ease;
    cursor: pointer;
  }

  .tab-button::after {
    content: "";
    position: absolute;
    left: 0;
    bottom: -1px;
    width: 100%;
    height: 3px;
    background: var(--tab-color);
    transform: scaleX(0);
    transform-origin: center;
    transition: transform 0.3s ease;
  }

  .tab-button:hover {
    color: rgb(var(--foreground));
  }

  .tab-button.active {
    color: var(--tab-color);
  }

  .tab-button.active::after {
    transform: scaleX(1);
  }

  /* Skills panels */
  .skills-content {
    position: relative;
    min-height: 300px;
  }

  .skills-panel {
    position: absolute;
    inset: 0;
    padding: 30px;
    opacity: 0;
    transform: translateY(20px);
    transition: all 0.4s ease;
    pointer-events: none;
  }

  .skills-panel.active {
    opacity: 1;
    transform: translateY(0);
    pointer-events: auto;
  }

  /* Skills grid */
  .skills-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(110px, 1fr));
    gap: 20px;
  }

  /* Skill cards */
  .skill-card {
    opacity: 0;
    transform: translateY(20px);
    animation: cardAppear 0.5s forwards;
    animation-delay: var(--delay, 0s);
  }

  @keyframes cardAppear {
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .skill-card-inner {
    aspect-ratio: 1;
    background: rgba(var(--background), 0.7);
    border-radius: 16px;
    padding: 15px;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    text-align: center;
    box-shadow:
      0 8px 20px rgba(0, 0, 0, 0.05),
      0 0 0 1px rgba(var(--foreground), 0.05);
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
  }

  .skill-card-inner::before {
    content: "";
    position: absolute;
    inset: 0;
    background: var(--skill-color);
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  .skill-card:hover .skill-card-inner {
    transform: translateY(-5px);
    box-shadow:
      0 15px 30px rgba(0, 0, 0, 0.1),
      0 0 0 1px var(--skill-color);
  }

  .skill-card:hover .skill-card-inner::before {
    opacity: 0.05;
  }

  .skill-icon {
    font-size: 2.2rem;
    color: var(--skill-color);
    margin-bottom: 10px;
    position: relative;
    transition: transform 0.3s ease;
  }

  .skill-card:hover .skill-icon {
    transform: scale(1.15);
  }

  .skill-name {
    font-size: 0.8rem;
    font-weight: 500;
    position: relative;
  }

  /* Responsive */
  @media (max-width: 768px) {
    .skills-tabs {
      display: flex;
      flex-wrap: wrap;
    }

    .tab-button {
      flex-grow: 1;
      padding: 15px 10px;
      font-size: 0.9rem;
    }

    .skills-grid {
      grid-template-columns: repeat(auto-fill, minmax(90px, 1fr));
      gap: 15px;
    }

    .skill-icon {
      font-size: 1.8rem;
    }

    .skill-name {
      font-size: 0.75rem;
    }
  }

  @media (max-width: 480px) {
    .skills-grid {
      grid-template-columns: repeat(auto-fill, minmax(80px, 1fr));
      gap: 10px;
    }

    .skill-icon {
      font-size: 1.6rem;
    }

    .skill-name {
      font-size: 0.7rem;
    }

    .skills-panel {
      padding: 20px 15px;
    }
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const tabButtons = document.querySelectorAll(".tab-button");
    const skillPanels = document.querySelectorAll(".skills-panel");

    // Tab switching functionality
    tabButtons.forEach((button) => {
      button.addEventListener("click", () => {
        const tabIndex = button.dataset.tab;

        // Update active tab
        tabButtons.forEach((btn) => btn.classList.remove("active"));
        button.classList.add("active");

        // Update active panel
        skillPanels.forEach((panel) => {
          panel.classList.remove("active");
          if (panel.dataset.tab === tabIndex) {
            // Small delay for smoother transition
            setTimeout(() => {
              panel.classList.add("active");
            }, 50);
          }
        });
      });
    });

    // Add subtle hover effects for neighboring cards
    const skillCards = document.querySelectorAll(".skill-card");

    skillCards.forEach((card) => {
      card.addEventListener("mouseenter", () => {
        const parent = card.closest(".skills-grid");
        const siblings = Array.from(parent.querySelectorAll(".skill-card"));
        const index = siblings.indexOf(card);

        // Get nearby cards
        siblings.forEach((sibling, siblingIndex) => {
          const distance = Math.abs(index - siblingIndex);

          // Closer cards get stronger effect
          if (distance > 0 && distance < 3) {
            const intensity = 3 - distance;
            sibling.style.transform = `scale(${1 + intensity * 0.01})`;
            sibling.style.transition = "transform 0.3s ease";
          }
        });
      });

      card.addEventListener("mouseleave", () => {
        const parent = card.closest(".skills-grid");
        const siblings = parent.querySelectorAll(".skill-card");

        siblings.forEach((sibling) => {
          sibling.style.transform = "";
        });
      });
    });
  });
</script>
