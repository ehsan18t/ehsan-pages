---
// src/components/SkillEditor.astro
import { Icon } from "astro-icon/components";

// --- skillGroups Data with Enhanced Descriptions ---
const skillGroups = [
  {
    category: "Web Frontend",
    color: "oklch(var(--accent-300))",
    icon: "mdi:folder-text-outline",
    skills: [
      { name: "HTML", icon: "mdi:language-html5", description: "Crafting semantic, accessible, and structured web content. Fluent in HTML5 elements and avoiding `div` soup (mostly!).", extension: ".html" },
      { name: "CSS", icon: "mdi:language-css3", description: "Styling the web with modern CSS, including Flexbox, Grid, custom properties, and animations. Occasionally wrestling the cascade and celebrating centered divs.", extension: ".css" },
      { name: "JavaScript", icon: "mdi:language-javascript", description: "Bringing websites to life with ES6+ features, asynchronous operations (Promises, async/await), and effective DOM manipulation. Still pondering 'this' sometimes.", extension: ".js" },
      { name: "TypeScript", icon: "mdi:language-typescript", description: "Adding static typing to JavaScript for safer, more maintainable codebases. Catching errors at compile time, not Friday 5 PM.", extension: ".ts" },
      { name: "React", icon: "mdi:react", description: "Building component-based UIs with React, utilizing Hooks (useState, useEffect, useContext) and Context API for state management in small to medium apps. Love the declarative approach!", extension: ".jsx" },
      { name: "NextJS", icon: "simple-icons:nextdotjs", description: "Leveraging the power of React with Next.js for features like SSR, SSG, API routes, and optimized performance. Making React apps even *Reactier*." },
      { name: "Svelte", icon: "simple-icons:svelte", description: "Exploring Svelte/SvelteKit for building cybernetically enhanced web apps. Less code, less virtual DOM, more magic (compiler magic, that is).", extension: ".svelte" },
      { name: "Redux", icon: "simple-icons:redux", description: "Taming complex application state with Redux, primarily using Redux Toolkit for a more streamlined and less boilerplate-heavy experience." },
      { name: "TailwindCSS", icon: "mdi:tailwind", description: "Rapidly building modern UIs with Tailwind's utility-first approach. My class lists might be long, but my CSS files are short!" },
      { name: "Astro", icon: "simple-icons:astro", description: "Building faster, content-focused websites by shipping less JavaScript. Loving the Island Architecture and performance focus!", extension: ".astro" },
    ],
  },
  {
    category: "Backend & Data",
    color: "oklch(var(--accent-500))",
    icon: "mdi:folder-cog-outline",
    skills: [
      { name: "Django", icon: "simple-icons:django", description: "Developing robust backend systems and APIs with Python using Django's 'batteries-included' philosophy. The admin panel is a lifesaver!" },
      { name: "PHP", icon: "mdi:language-php", description: "Experience with PHP for server-side logic, building and maintaining web applications. Echo 'Hello, World!';", extension: ".php" },
      { name: "SQL", icon: "mdi:database-search", description: "Querying and managing relational databases. Crafting `SELECT` statements and trying *very* hard to remember all the `JOIN` types.", extension: ".sql" },
      { name: "Firebase", icon: "mdi:firebase", description: "Utilizing Firebase (Firestore, Auth, Hosting) for rapid development of backend features and real-time data synchronization. Backend-as-a-Service power!" },
    ],
  },
  {
    category: "Core Languages",
    color: "oklch(var(--accent-900))",
    icon: "simple-icons:codecrafters", // You fixed this icon, keeping it
    skills: [
      { name: "Python", icon: "mdi:language-python", description: "Versatile language for scripting, backend (Django), and general programming. Appreciating the readability, dreading the accidental indentation error.", extension: ".py" },
      { name: "Java", icon: "mdi:language-java", description: "Solid understanding of Java and OOP principles. Familiar with its ecosystem and verbosity (sometimes you need a `AbstractSingletonProxyFactoryBean`!).", extension: ".java" },
      { name: "C/C++", icon: "mdi:language-cpp", description: "Foundational knowledge of C/C++ from academic work, understanding memory management (and the fear of segfaults).", extension: ".cpp" },
    ],
  },
  {
    category: "Tools & Systems",
    color: "oklch(var(--secondary))",
    icon: "mdi:folder-wrench-outline",
    skills: [
      { name: "Git", icon: "mdi:git", description: "Managing code history like a pro (or at least like someone who knows how to `git blame`). Branching, merging, and occasionally resolving merge conflicts with deep breaths." },
      { name: "GitHub", icon: "mdi:github", description: "Collaborating on projects, managing repositories, and leveraging the GitHub ecosystem (Issues, PRs, Actions). My contribution graph is... a work in progress." },
      { name: "Linux", icon: "mdi:linux", description: "Navigating the Linux environment comfortably using the command line. `sudo make me a sandwich`." },
      { name: "Bash", icon: "mdi:bash", description: "Writing shell scripts for automating tasks and making the terminal do my bidding. Sometimes cryptic, always powerful.", extension: ".sh" },
      { name: "Batch", icon: "mdi:microsoft-windows", description: "Basic Windows Batch scripting knowledge for when PowerShell feels like overkill (or isn't available). `@echo off` is my friend.", extension: ".bat" },
      { name: "Figma", icon: "mdi:vector-bezier", description: "Translating beautiful Figma designs into functional code. Inspecting properties, exporting assets, and appreciating Auto Layout." },
      { name: "Vim", icon: "simple-icons:vim", description: "Efficient text editing using Vim's modal interface. Still figuring out how to exit sometimes... just kidding (mostly). `:wq`" },
    ],
  },
  {
    category: "Workflow & Process",
    color: "oklch(var(--foreground-muted))",
    icon: "mdi:folder-sync-outline",
    skills: [
      { name: "GitHub Actions", icon: "simple-icons:githubactions", description: "Automating build, test, and deployment workflows with GitHub Actions. Making YAML less scary, one workflow at a time.", extension: ".yml" },
      { name: "Jira", icon: "mdi:jira", description: "Navigating Jira boards, tracking issues, and participating in Agile workflows. Moving tickets from 'To Do' to 'Done' is satisfying." },
      { name: "Scrum", icon: "mdi:account-group-outline", description: "Experience working in Scrum teams: daily stand-ups, sprint planning, retrospectives. Understanding story points is an ongoing journey." },
      { name: "LaTeX", icon: "mdi:alpha-l-box-outline", description: "Creating high-quality typeset documents, especially for academic or formal reports. The results are beautiful, even if the syntax feels like coding plain text.", extension: ".tex" },
      { name: "Markdown", icon: "mdi:language-markdown-outline", description: "Writing clean and readable documentation, READMEs, and notes using Markdown. Simple, effective, and essential.", extension: ".md" },
      { name: "Googling", icon: "mdi:google", description: "Highly proficient in finding solutions, documentation, and cat memes online. Arguably the most critical skill for any developer. Stack Overflow is my co-pilot." },
    ],
  },
];

// --- Make sure the rest of your frontmatter (skillsMap, formatDescription) is still here ---
const skillsMap = new Map();
skillGroups.forEach((group) => {
  group.skills.forEach((skill) => {
    skillsMap.set(skill.name, { ...skill, categoryColor: group.color, extension: (skill as any).extension });
  });
});

function formatDescription(text: string): string {
  return text.replace(/\n/g, "<br/>");
}
---

<section id="skills-editor-section" class="py-20 md:py-28">
  <div class="container mx-auto px-4">
    <div class="text-center mb-12 md:mb-16">
      <h2 class="text-4xl md:text-5xl font-bold mb-3 inline-block bg-gradient-to-r from-[oklch(var(--accent-300))] to-[oklch(var(--accent-500))] text-transparent bg-clip-text">Developer <span class="font-doto font-bold"> Toolkit</span></h2>
      <div class="w-24 h-1 bg-gradient-to-r from-[oklch(var(--accent-500))] to-[oklch(var(--accent-900))] mx-auto rounded-full"></div>
      <p class="text-foreground-muted max-w-2xl mx-auto mt-6 text-lg">An interactive overview of the technologies I use. Click on a file to learn more.</p>
    </div>

    {/* --- Code Editor Structure --- */}
    <div class="code-editor bg-[color-mix(in_oklch,_rgb(var(--background)),_black_25%)] text-sm rounded-lg shadow-2xl border border-[rgba(var(--foreground)/0.1)] overflow-hidden max-w-5xl mx-auto min-h-[60vh] flex" data-skills={JSON.stringify(Object.fromEntries(skillsMap))}>
      {/* Sidebar (File Tree) */}
      <aside class="sidebar w-48 md:w-64 bg-[color-mix(in_oklch,_rgb(var(--background)),_black_40%)] border-r border-[rgba(var(--foreground)/0.1)] p-2 overflow-y-auto">
        <div class="text-xs text-foreground-muted uppercase mb-2 px-1">Explorer</div>
        <ul class="file-tree space-y-0.5">
          {
            skillGroups.map((group, index) => (
              <li class="folder-item" data-type="folder" data-expanded={index === 0 ? "true" : "false"}>
                {" "}
                {/* Expand first folder */}
                <div class="folder-header flex items-center p-1 rounded cursor-pointer hover:bg-[rgba(var(--foreground)/0.05)]" style={`color: ${group.color};`}>
                  <span class="folder-arrow transition-transform duration-200">
                    <Icon name="mdi:chevron-right" class="w-4 h-4" />
                  </span>
                  <Icon name={group.icon} class="w-4 h-4 mx-1 flex-shrink-0" />
                  <span class="truncate font-medium text-xs">{group.category}</span>
                </div>
                <ul class="skill-list pl-4 overflow-hidden transition-all duration-300 ease-in-out">
                  {group.skills.map((skill) => (
                    <li class="file-item p-1 rounded cursor-pointer hover:bg-[rgba(var(--foreground)/0.1)] text-foreground-muted hover:text-foreground" data-type="file" data-skill-name={skill.name}>
                      <div class="flex items-center">
                        <Icon name={skill.icon} class="w-4 h-4 mr-2 flex-shrink-0 opacity-80" style={`color: ${group.color};`} />
                        <span class="truncate text-xs">{skill.name}</span>
                      </div>
                    </li>
                  ))}
                </ul>
              </li>
            ))
          }
        </ul>
      </aside>

      {/* Main Content */}
      <main class="main-content flex-1 flex flex-col min-w-0">
        {/* Tab Bar */}
        <div class="tab-bar flex border-b border-[rgba(var(--foreground)/0.1)] bg-[color-mix(in_oklch,_rgb(var(--background)),_black_40%)]">
          <div id="editor-tab" class="tab active px-4 py-2 text-xs border-r border-[rgba(var(--foreground)/0.1)] flex items-center gap-2 max-w-full">
            {/* Icon and Name appear here */}
            <span class="tab-icon opacity-80"></span>
            <span class="tab-name truncate"></span>
          </div>
          {/* Can add more tabs or controls here later */}
        </div>

        {/* Editor Pane */}
        <div id="editor-pane" class="editor-pane flex-1 p-4 md:p-6 overflow-y-auto font-mono text-xs md:text-sm leading-relaxed text-foreground-muted">
          {/* Welcome message or Skill details appear here */}
          <div class="welcome-message">
            <p>// Welcome to my Skill IDE!</p>
            <p>// Click on a file in the explorer (left sidebar) to view details about a specific skill.</p>
            <br />
            <p class="text-accent-500">// Example:</p>
            <p>// 'Web Frontend' <span class="text-foreground-muted">></span> 'React'</p>
          </div>
          <div class="skill-content" style="display: none;">
            <h3 id="skill-title" class="text-lg md:text-xl font-semibold text-foreground mb-4"></h3>
            <p id="skill-description" class="whitespace-pre-wrap"></p>
          </div>
        </div>

        {/* Status Bar (Optional) */}
        <footer class="status-bar text-xs px-3 py-1 bg-[color-mix(in_oklch,_rgb(var(--background)),_black_50%)] border-t border-[rgba(var(--foreground)/0.1)] text-foreground-muted flex justify-between">
          <span>{skillsMap.size} Skills Loaded</span>
          <span id="current-line">Ln 1, Col 1</span>
          {/* Placeholder */}
        </footer>
      </main>
    </div>
  </div>
</section>

{/* --- CSS --- */}
<style>
  .code-editor {
    font-family: var(--font-Inter); /* Use your main font */
  }
  .editor-pane {
    /* You can specify a fixed monospace font stack here if needed */
    font-family: Consolas, Monaco, "Andale Mono", "Ubuntu Mono", monospace;
  }

  /* File Tree Styling */
  .sidebar {
    /* Custom scrollbar for sidebar */
    scrollbar-width: thin;
    scrollbar-color: rgba(var(--foreground), 0.2) transparent;
  }
  .sidebar::-webkit-scrollbar {
    width: 5px;
  }
  .sidebar::-webkit-scrollbar-track {
    background: transparent;
  }
  .sidebar::-webkit-scrollbar-thumb {
    background-color: rgba(var(--foreground), 0.2);
    border-radius: 3px;
  }

  .folder-item[data-expanded="false"] > .skill-list {
    max-height: 0;
  }
  .folder-item[data-expanded="true"] > .skill-list {
    /* Calculate max-height dynamically if possible, or use a large enough value */
    max-height: 500px; /* Adjust if needed */
  }

  .folder-item .skill-list {
    transition: max-height 0.3s ease-in-out; /* Ensure transition is on skill-list */
  }

  .folder-item[data-expanded="true"] .folder-arrow {
    transform: rotate(90deg);
  }

  /* Active states */
  .file-item.active {
    background-color: rgba(var(--accent-500), 0.15);
    color: rgb(var(--foreground));
  }
  .tab.active {
    background-color: rgba(var(--background), 0.9); /* Match editor pane bg */
    color: rgb(var(--foreground));
    border-bottom-color: transparent; /* Connect tab to pane */
    position: relative;
    top: 1px; /* Align with border */
  }
  .tab.active .tab-icon {
    color: var(--active-color, oklch(var(--accent-500))); /* Use skill color */
  }

  /* Simple cursor animation */
  .editor-pane::after {
    content: "|"; /* Disabled for now, can be distracting */
    animation: blink 1s step-end infinite;
    display: inline-block;
    margin-left: 2px;
    color: var(--color-accent-500); /* Match text color */
  }
  @keyframes blink {
    50% {
      opacity: 0;
    }
  }
</style>

{/* --- JavaScript --- */}
<script>
  document.addEventListener("DOMContentLoaded", () => {
    const editor = document.querySelector(".code-editor");
    const sidebar = editor?.querySelector(".sidebar .file-tree");
    const editorPane = editor?.querySelector("#editor-pane");
    const welcomeMessage = editorPane?.querySelector(".welcome-message");
    const skillContent = editorPane?.querySelector(".skill-content");
    const skillTitle = editorPane?.querySelector("#skill-title");
    const skillDescription = editorPane?.querySelector("#skill-description");
    const editorTab = editor?.querySelector("#editor-tab");
    const tabNameEl = editorTab?.querySelector(".tab-name");
    const tabIconEl = editorTab?.querySelector(".tab-icon");

    // Get skill data passed from Astro frontmatter
    // It now includes the extension property where added
    const skillsData = JSON.parse(editor?.dataset.skills || "{}");

    if (!sidebar || !editorPane || !skillsData || !welcomeMessage || !skillContent || !skillTitle || !skillDescription || !editorTab || !tabNameEl || !tabIconEl) {
      console.error("Skill Editor elements not found!");
      return;
    }

    sidebar.addEventListener("click", (event) => {
      const target = event.target as HTMLElement;
      const folderHeader = target.closest(".folder-header");
      const fileItem = target.closest(".file-item");

      if (folderHeader) {
        const folderItem = folderHeader.closest(".folder-item");
        if (folderItem) handleFolderClick(folderItem);
      } else if (fileItem) {
        const skillName = fileItem.getAttribute("data-skill-name");
        if (skillName) {
          handleSkillClick(fileItem, skillName);
        }
      }
    });

    function handleFolderClick(folderItem: Element) {
      const isExpanded = folderItem.getAttribute("data-expanded") === "true";
      folderItem.setAttribute("data-expanded", String(!isExpanded));
    }

    function handleSkillClick(fileItem: Element, skillName: string) {
      const skill = skillsData[skillName];
      if (!skill) return;

      setActiveItem(fileItem);

      // --- MODIFICATION START ---
      // Construct tab name with extension if available
      const tabDisplayName = skill.extension ? `${skill.name}${skill.extension}` : skill.name;
      tabNameEl.textContent = tabDisplayName;
      // --- MODIFICATION END ---

      // Update Tab Icon
      const iconId = `icon-${skill.icon.replace(":", "-")}`;
      if (document.getElementById(iconId)) {
        tabIconEl.innerHTML = `<svg class="astro-icon" width="16" height="16" style="color: ${skill.categoryColor};"><use xlink:href="#${iconId}"></use></svg>`;
      } else {
        tabIconEl.innerHTML = "";
        console.warn(`Icon symbol not found for ID: ${iconId}`);
      }

      // Update Editor Pane
      skillTitle.textContent = skill.name; // Keep title without extension
      skillDescription.innerHTML = skill.description.replace(/\n/g, "<br/>");
      welcomeMessage.style.display = "none";
      skillContent.style.display = "block";
    }

    function setActiveItem(activeItem: Element) {
      sidebar.querySelector(".file-item.active")?.classList.remove("active");
      activeItem.classList.add("active");
    }

    function initializeEditor() {
      if (tabNameEl) tabNameEl.textContent = "welcome.txt"; // Initial tab
      if (tabIconEl) tabIconEl.innerHTML = "";
      if (welcomeMessage) welcomeMessage.style.display = "block";
      if (skillContent) skillContent.style.display = "none";
      // Initial folder state handled by CSS + data-attribute
    }

    initializeEditor();
  });
</script>
