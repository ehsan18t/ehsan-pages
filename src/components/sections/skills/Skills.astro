---
// src/components/SkillEditor.astro
import { Icon } from "astro-icon/components";

// --- Use the enhanced skillGroups data from above ---
const skillGroups = [
  /* Paste the full skillGroups data with descriptions here */
  {
    category: "Web Frontend",
    color: "oklch(var(--accent-300))",
    icon: "mdi:folder-text-outline",
    skills: [
      { name: "HTML", icon: "mdi:language-html5", description: "Proficient in semantic HTML5 markup for structure and accessibility." },
      { name: "CSS", icon: "mdi:language-css3", description: "Skilled in modern CSS, including Flexbox, Grid, animations, and responsive design. Experience with preprocessors like Sass/SCSS." },
      { name: "JavaScript", icon: "mdi:language-javascript", description: "Strong understanding of ES6+ features, DOM manipulation, asynchronous programming (async/await, Promises)." },
      { name: "TypeScript", icon: "mdi:language-typescript", description: "Using TypeScript for enhanced type safety and maintainability in larger projects." },
      { name: "React", icon: "mdi:react", description: "Extensive experience building dynamic UIs with React, hooks, context API, and component libraries." },
      { name: "NextJS", icon: "simple-icons:nextdotjs", description: "Building server-rendered and static React applications with Next.js, including routing and API routes." },
      { name: "Svelte", icon: "simple-icons:svelte", description: "Experience with Svelte/SvelteKit for building highly performant web applications with less boilerplate." },
      { name: "Redux", icon: "simple-icons:redux", description: "Managing complex application state using Redux Toolkit and middleware." },
      { name: "TailwindCSS", icon: "mdi:tailwind", description: "Utilizing Tailwind CSS for rapid UI development with utility-first classes." },
      { name: "Astro", icon: "simple-icons:astro", description: "Building fast, content-focused websites with Astro's island architecture." },
    ],
  },
  {
    category: "Backend & Data",
    color: "oklch(var(--accent-500))",
    icon: "mdi:folder-cog-outline",
    skills: [
      { name: "Django", icon: "simple-icons:django", description: "Developing backend applications and APIs using the Django framework." },
      { name: "PHP", icon: "mdi:language-php", description: "Experience with PHP for server-side scripting and web development." },
      { name: "SQL", icon: "mdi:database-search", description: "Writing SQL queries and interacting with relational databases (e.g., PostgreSQL, MySQL)." },
      { name: "Firebase", icon: "mdi:firebase", description: "Utilizing Firebase services like Firestore, Authentication, and Hosting for backend solutions." },
    ],
  },
  {
    category: "Core Languages",
    color: "oklch(var(--accent-900))",
    icon: "simple-icons:codecrafters",
    skills: [
      { name: "Python", icon: "mdi:language-python", description: "General-purpose programming with Python, including scripting and backend development (with Django)." },
      { name: "Java", icon: "mdi:language-java", description: "Experience with Java for object-oriented programming concepts." },
      { name: "C/C++", icon: "mdi:language-cpp", description: "Foundational knowledge of C/C++ for systems programming concepts." },
    ],
  },
  {
    category: "Tools & Systems",
    color: "oklch(var(--secondary))",
    icon: "mdi:folder-wrench-outline",
    skills: [
      { name: "Git", icon: "mdi:git", description: "Proficient in version control using Git, including branching, merging, and rebasing." },
      { name: "GitHub", icon: "mdi:github", description: "Using GitHub for repository hosting, collaboration, and Actions." },
      { name: "Linux", icon: "mdi:linux", description: "Comfortable working in Linux environments, using command-line tools and shell scripting." },
      { name: "Bash", icon: "mdi:bash", description: "Writing Bash scripts for automation and system tasks." },
      { name: "Batch", icon: "mdi:microsoft-windows", description: "Basic knowledge of Windows Batch scripting." },
      { name: "Figma", icon: "mdi:vector-bezier", description: "Using Figma for UI design mockups, prototyping, and inspecting designs." },
      { name: "Vim", icon: "simple-icons:vim", description: "Using Vim as a text editor for efficient code editing." },
    ],
  },
  {
    category: "Workflow & Process",
    color: "oklch(var(--foreground-muted))",
    icon: "mdi:folder-sync-outline",
    skills: [
      { name: "GitHub Actions", icon: "simple-icons:githubactions", description: "Setting up CI/CD pipelines and automating workflows with GitHub Actions." },
      { name: "Jira", icon: "mdi:jira", description: "Using Jira for issue tracking and project management in Agile environments." },
      { name: "Scrum", icon: "mdi:account-group-outline", description: "Working within Scrum teams, participating in sprints, stand-ups, and retrospectives." },
      { name: "LaTeX", icon: "mdi:alpha-l-box-outline", description: "Creating documents and reports using LaTeX." },
      { name: "Markdown", icon: "mdi:language-markdown-outline", description: "Writing documentation and notes using Markdown." },
      { name: "Googling", icon: "mdi:google", description: "Expert-level information retrieval and problem-solving via search engines. Essential developer skill!" },
    ],
  },
];

// Create a flat map for easier lookup in JS
const skillsMap = new Map();
skillGroups.forEach((group) => {
  group.skills.forEach((skill) => {
    skillsMap.set(skill.name, { ...skill, categoryColor: group.color });
  });
});

// Helper function to format description (simple example)
function formatDescription(text: string) {
  return text.replace(/\n/g, "<br/>"); // Replace newlines with <br>
}
---

<section id="skills-editor-section" class="py-20 md:py-28">
  <div class="container mx-auto px-4">
    <div class="text-center mb-12 md:mb-16">
      <h2 class="text-4xl md:text-5xl font-bold mb-3 inline-block bg-gradient-to-r from-[oklch(var(--accent-300))] to-[oklch(var(--accent-500))] text-transparent bg-clip-text">Developer <span class="font-doto font-bold"> Toolkit</span></h2>
      <div class="w-24 h-1 bg-gradient-to-r from-[oklch(var(--accent-500))] to-[oklch(var(--accent-900))] mx-auto rounded-full"></div>
      <p class="text-foreground-muted max-w-2xl mx-auto mt-6 text-lg">An interactive overview of the technologies I use. Click on a file to learn more.</p>
    </div>

    {/* --- Code Editor Structure --- */}
    <div class="code-editor bg-[color-mix(in_oklch,_rgb(var(--background)),_black_25%)] text-sm rounded-lg shadow-2xl border border-[rgba(var(--foreground)/0.1)] overflow-hidden max-w-5xl mx-auto min-h-[60vh] flex" data-skills={JSON.stringify(Object.fromEntries(skillsMap))}>
      {/* Sidebar (File Tree) */}
      <aside class="sidebar w-48 md:w-64 bg-[color-mix(in_oklch,_rgb(var(--background)),_black_40%)] border-r border-[rgba(var(--foreground)/0.1)] p-2 overflow-y-auto">
        <div class="text-xs text-foreground-muted uppercase mb-2 px-1">Explorer</div>
        <ul class="file-tree space-y-0.5">
          {
            skillGroups.map((group, index) => (
              <li class="folder-item" data-type="folder" data-expanded={index === 0 ? "true" : "false"}>
                {" "}
                {/* Expand first folder */}
                <div class="folder-header flex items-center p-1 rounded cursor-pointer hover:bg-[rgba(var(--foreground)/0.05)]" style={`color: ${group.color};`}>
                  <span class="folder-arrow transition-transform duration-200">
                    <Icon name="mdi:chevron-right" class="w-4 h-4" />
                  </span>
                  <Icon name={group.icon} class="w-4 h-4 mx-1 flex-shrink-0" />
                  <span class="truncate font-medium text-xs">{group.category}</span>
                </div>
                <ul class="skill-list pl-4 overflow-hidden transition-all duration-300 ease-in-out">
                  {group.skills.map((skill) => (
                    <li class="file-item p-1 rounded cursor-pointer hover:bg-[rgba(var(--foreground)/0.1)] text-foreground-muted hover:text-foreground" data-type="file" data-skill-name={skill.name}>
                      <div class="flex items-center">
                        <Icon name={skill.icon} class="w-4 h-4 mr-2 flex-shrink-0 opacity-80" style={`color: ${group.color};`} />
                        <span class="truncate text-xs">{skill.name}</span>
                      </div>
                    </li>
                  ))}
                </ul>
              </li>
            ))
          }
        </ul>
      </aside>

      {/* Main Content */}
      <main class="main-content flex-1 flex flex-col min-w-0">
        {/* Tab Bar */}
        <div class="tab-bar flex border-b border-[rgba(var(--foreground)/0.1)] bg-[color-mix(in_oklch,_rgb(var(--background)),_black_40%)]">
          <div id="editor-tab" class="tab active px-4 py-2 text-xs border-r border-[rgba(var(--foreground)/0.1)] flex items-center gap-2 max-w-full">
            {/* Icon and Name appear here */}
            <span class="tab-icon opacity-80"></span>
            <span class="tab-name truncate"></span>
          </div>
          {/* Can add more tabs or controls here later */}
        </div>

        {/* Editor Pane */}
        <div id="editor-pane" class="editor-pane flex-1 p-4 md:p-6 overflow-y-auto font-mono text-xs md:text-sm leading-relaxed text-foreground-muted">
          {/* Welcome message or Skill details appear here */}
          <div class="welcome-message">
            <p>// Welcome to my Skill IDE!</p>
            <p>// Click on a file in the explorer (left sidebar) to view details about a specific skill.</p>
            <br />
            <p class="text-accent-500">// Example:</p>
            <p>// 'Web Frontend' <span class="text-foreground-muted">></span> 'React'</p>
          </div>
          <div class="skill-content" style="display: none;">
            <h3 id="skill-title" class="text-lg md:text-xl font-semibold text-foreground mb-4"></h3>
            <p id="skill-description" class="whitespace-pre-wrap"></p>
          </div>
        </div>

        {/* Status Bar (Optional) */}
        <footer class="status-bar text-xs px-3 py-1 bg-[color-mix(in_oklch,_rgb(var(--background)),_black_50%)] border-t border-[rgba(var(--foreground)/0.1)] text-foreground-muted flex justify-between">
          <span>{skillsMap.size} Skills Loaded</span>
          <span id="current-line">Ln 1, Col 1</span>
          {/* Placeholder */}
        </footer>
      </main>
    </div>
  </div>
</section>

{/* --- CSS --- */}
<style>
  .code-editor {
    font-family: var(--font-Inter); /* Use your main font */
  }
  .editor-pane {
    /* You can specify a fixed monospace font stack here if needed */
    font-family: Consolas, Monaco, "Andale Mono", "Ubuntu Mono", monospace;
  }

  /* File Tree Styling */
  .sidebar {
    /* Custom scrollbar for sidebar */
    scrollbar-width: thin;
    scrollbar-color: rgba(var(--foreground), 0.2) transparent;
  }
  .sidebar::-webkit-scrollbar {
    width: 5px;
  }
  .sidebar::-webkit-scrollbar-track {
    background: transparent;
  }
  .sidebar::-webkit-scrollbar-thumb {
    background-color: rgba(var(--foreground), 0.2);
    border-radius: 3px;
  }

  .folder-item[data-expanded="false"] > .skill-list {
    max-height: 0;
  }
  .folder-item[data-expanded="true"] > .skill-list {
    /* Calculate max-height dynamically if possible, or use a large enough value */
    max-height: 500px; /* Adjust if needed */
  }

  .folder-item .skill-list {
    transition: max-height 0.3s ease-in-out; /* Ensure transition is on skill-list */
  }

  .folder-item[data-expanded="true"] .folder-arrow {
    transform: rotate(90deg);
  }

  /* Active states */
  .file-item.active {
    background-color: rgba(var(--accent-500), 0.15);
    color: rgb(var(--foreground));
  }
  .tab.active {
    background-color: rgba(var(--background), 0.9); /* Match editor pane bg */
    color: rgb(var(--foreground));
    border-bottom-color: transparent; /* Connect tab to pane */
    position: relative;
    top: 1px; /* Align with border */
  }
  .tab.active .tab-icon {
    color: var(--active-color, oklch(var(--accent-500))); /* Use skill color */
  }

  /* Simple cursor animation */
  .editor-pane::after {
    /* content: '|'; */ /* Disabled for now, can be distracting */
    /* animation: blink 1s step-end infinite; */
    /* display: inline-block; */
    /* margin-left: 2px; */
  }
  @keyframes blink {
    50% {
      opacity: 0;
    }
  }
</style>

{/* --- JavaScript --- */}
<script>
  document.addEventListener("DOMContentLoaded", () => {
    const editor = document.querySelector(".code-editor");
    const sidebar = editor?.querySelector(".sidebar .file-tree");
    const editorPane = editor?.querySelector("#editor-pane");
    const welcomeMessage = editorPane?.querySelector(".welcome-message");
    const skillContent = editorPane?.querySelector(".skill-content");
    const skillTitle = editorPane?.querySelector("#skill-title");
    const skillDescription = editorPane?.querySelector("#skill-description");
    const editorTab = editor?.querySelector("#editor-tab");
    const tabNameEl = editorTab?.querySelector(".tab-name");
    const tabIconEl = editorTab?.querySelector(".tab-icon");

    const skillsData = JSON.parse(editor?.dataset.skills || "{}");

    if (!sidebar || !editorPane || !skillsData || !welcomeMessage || !skillContent || !skillTitle || !skillDescription || !editorTab || !tabNameEl || !tabIconEl) {
      console.error("Skill Editor elements not found!");
      return;
    }

    sidebar.addEventListener("click", (event) => {
      const target = event.target as HTMLElement;
      // Target the folder header directly for folder clicks
      const folderHeader = target.closest(".folder-header");
      const fileItem = target.closest(".file-item"); // Target file item directly

      if (folderHeader) {
        const folderItem = folderHeader.closest(".folder-item");
        if (folderItem) handleFolderClick(folderItem);
      } else if (fileItem) {
        const skillName = fileItem.getAttribute("data-skill-name");
        if (skillName) {
          handleSkillClick(fileItem, skillName);
        }
      }
    });

    function handleFolderClick(folderItem: Element) {
      const isExpanded = folderItem.getAttribute("data-expanded") === "true";
      folderItem.setAttribute("data-expanded", String(!isExpanded));
      // Simple toggle based on attribute for CSS max-height transition
    }

    function handleSkillClick(fileItem: Element, skillName: string) {
      const skill = skillsData[skillName];
      if (!skill) return;
      setActiveItem(fileItem);

      tabNameEl.textContent = skill.name;
      // Use specific MDI icon name structure for astro-icon's <use> element
      const iconId = `icon-${skill.icon.replace(":", "-")}`;
      // Check if Icon component generated the symbol correctly
      if (document.getElementById(iconId)) {
        tabIconEl.innerHTML = `<svg class="astro-icon" width="16" height="16" style="color: ${skill.categoryColor};"><use xlink:href="#${iconId}"></use></svg>`;
      } else {
        tabIconEl.innerHTML = ""; // Clear if icon not found
        console.warn(`Icon symbol not found for ID: ${iconId}`);
      }
      // editorTab.style.setProperty("--active-color", skill.categoryColor); // Color set directly now

      skillTitle.textContent = skill.name;
      skillDescription.innerHTML = skill.description.replace(/\n/g, "<br/>");
      welcomeMessage.style.display = "none";
      skillContent.style.display = "block";
    }

    function setActiveItem(activeItem: Element) {
      sidebar.querySelector(".file-item.active")?.classList.remove("active");
      activeItem.classList.add("active");
    }

    function initializeEditor() {
      if (tabNameEl) tabNameEl.textContent = "welcome.txt";
      if (tabIconEl) tabIconEl.innerHTML = "";
      if (welcomeMessage) welcomeMessage.style.display = "block";
      if (skillContent) skillContent.style.display = "none";

      // **Important:** Ensure initial max-height is set correctly by CSS
      // The CSS rule `.folder-item[data-expanded="false"] > .skill-list { max-height: 0; }`
      // and `.folder-item[data-expanded="true"] > .skill-list { max-height: 500px; }`
      // handle the initial state based on the `data-expanded` attribute set in the HTML.
      // No extra JS needed here for initial height setting.
    }

    // --- REMOVED transitionstart / transitionend listeners ---

    initializeEditor();
  });
</script>
