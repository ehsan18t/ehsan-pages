---
const { animation = "fade", delay = "0ms", threshold = 0.1, duration = "0.7s", distance = "30px", once = true, stagger = "0ms", root = null, rootMargin = "0px", easing = "cubic-bezier(0.16, 1, 0.3, 1)" } = Astro.props;
---

<div class={`animate-on-scroll ${animation}`} style={`--delay: ${delay}; --duration: ${duration}; --distance: ${distance}; --easing: ${easing};`} data-animate data-threshold={threshold} data-once={once} data-stagger={stagger} data-root={root} data-root-margin={rootMargin}>
  <slot />
</div>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    // Check for reduced motion preference
    const prefersReducedMotion = window.matchMedia("(prefers-reduced-motion: reduce)").matches;

    // Cache the observers by their configuration parameters
    const observerCache = new Map();
    const elements = document.querySelectorAll("[data-animate]");

    // Track elements for potential cleanup
    const trackedElements = new WeakMap();

    // Create staggered groups
    const staggerGroups = new Map();

    elements.forEach((el: any, index) => {
      // Skip initialization if user prefers reduced motion
      if (prefersReducedMotion) {
        el.classList.add("animate-in", "motion-reduced");
        return;
      }

      // Get configuration from data attributes
      const threshold = parseFloat(el.dataset.threshold) || 0.2;
      const once = el.dataset.once !== "false";
      const root = el.dataset.root ? document.querySelector(el.dataset.root) : null;
      const rootMargin = el.dataset.rootMargin || "0px";
      const stagger = el.dataset.stagger ? parseInt(el.dataset.stagger, 10) : 0;

      // Create a unique key for this observer configuration
      const observerKey = `${threshold}-${rootMargin}-${root?.id || "null"}`;

      // Group elements by stagger if needed
      if (stagger > 0) {
        if (!staggerGroups.has(observerKey)) {
          staggerGroups.set(observerKey, []);
        }
        staggerGroups.get(observerKey).push({ element: el, index });
        return; // Will be handled after grouping
      }

      // Get or create observer with these settings
      let observer: any;
      if (observerCache.has(observerKey)) {
        observer = observerCache.get(observerKey);
      } else {
        observer = new IntersectionObserver(
          (entries) => {
            entries.forEach((entry) => {
              if (entry.isIntersecting) {
                entry.target.classList.add("animate-in");
                if (once) {
                  observer.unobserve(entry.target);
                  trackedElements.delete(entry.target);
                }
              } else if (!once) {
                entry.target.classList.remove("animate-in");
              }
            });
          },
          { threshold, root, rootMargin }
        );
        observerCache.set(observerKey, observer);
      }

      // Start observing this element
      observer.observe(el);
      trackedElements.set(el, observer);
    });

    // Handle staggered animations
    staggerGroups.forEach((elements, observerKey) => {
      const [threshold, rootMargin, rootId] = observerKey.split("-");
      const root = rootId !== "null" ? document.getElementById(rootId) : null;
      const once = elements[0].element.dataset.once !== "false";
      const staggerDelay = parseInt(elements[0].element.dataset.stagger, 10);

      const observer = new IntersectionObserver(
        (entries) => {
          const visible = entries.filter((entry) => entry.isIntersecting);

          visible.forEach((entry: any) => {
            const index = elements.findIndex((e: any) => e.element === entry.target);
            if (index !== -1) {
              const delay = staggerDelay * index;
              entry.target.style.setProperty("--computed-delay", `${delay}ms`);

              // Use requestAnimationFrame to ensure style is applied before adding class
              requestAnimationFrame(() => {
                entry.target.classList.add("animate-in");
              });

              if (once) {
                observer.unobserve(entry.target);
                trackedElements.delete(entry.target);
              }
            }
          });

          // Remove class when element is no longer visible (only if once is false)
          if (!once) {
            entries
              .filter((entry) => !entry.isIntersecting)
              .forEach((entry) => {
                entry.target.classList.remove("animate-in");
              });
          }
        },
        { threshold: parseFloat(threshold), root, rootMargin }
      );

      elements.forEach(({ element }: any) => {
        observer.observe(element);
        trackedElements.set(element, observer);
      });

      observerCache.set(observerKey + "-stagger", observer);
    });

    // Clean up observers when navigating away
    const cleanup = () => {
      observerCache.forEach((observer) => observer.disconnect());
      observerCache.clear();
    };

    // Add cleanup to page navigation events
    document.addEventListener("astro:before-swap", cleanup);
    window.addEventListener("beforeunload", cleanup);
  });
</script>

<style>
  .animate-on-scroll {
    opacity: 0;
    visibility: visible;
    backface-visibility: hidden;
    transform-style: preserve-3d;
    /* Only apply will-change when animation is about to start */
    &.will-animate {
      will-change: transform, opacity;
    }
  }

  /* Animation running state */
  .animate-in {
    animation-duration: var(--duration);
    animation-timing-function: var(--easing);
    animation-delay: calc(var(--delay) + var(--computed-delay, 0ms));
    animation-fill-mode: forwards;
    contain: layout paint; /* Performance optimization */
  }

  /* Advanced Keyframe Animations */
  @keyframes fadeIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }

  @keyframes slideUp {
    0% {
      opacity: 0;
      transform: translate3d(0, var(--distance), 40px);
    }
    30% {
      opacity: 0.5;
    }
    100% {
      opacity: 1;
      transform: translate3d(0, 0, 0);
    }
  }

  @keyframes slideDown {
    0% {
      opacity: 0;
      transform: translate3d(0, calc(var(--distance) * -1), 40px);
    }
    30% {
      opacity: 0.5;
    }
    100% {
      opacity: 1;
      transform: translate3d(0, 0, 0);
    }
  }

  @keyframes slideLeft {
    0% {
      opacity: 0;
      transform: translate3d(var(--distance), 0, 40px) rotateY(-4deg);
    }
    30% {
      opacity: 0.5;
    }
    100% {
      opacity: 1;
      transform: translate3d(0, 0, 0) rotateY(0);
    }
  }

  @keyframes slideRight {
    0% {
      opacity: 0;
      transform: translate3d(calc(var(--distance) * -1), 0, 40px) rotateY(4deg);
    }
    30% {
      opacity: 0.5;
    }
    100% {
      opacity: 1;
      transform: translate3d(0, 0, 0) rotateY(0);
    }
  }

  @keyframes zoomIn {
    0% {
      opacity: 0;
      transform: scale3d(0.8, 0.8, 0.8) translateZ(-60px);
    }
    40% {
      opacity: 0.6;
      transform: scale3d(0.9, 0.9, 0.9) translateZ(-30px);
    }
    100% {
      opacity: 1;
      transform: scale3d(1, 1, 1) translateZ(0);
    }
  }

  @keyframes zoomOut {
    0% {
      opacity: 0;
      transform: scale3d(1.2, 1.2, 1.2) translateZ(60px);
    }
    40% {
      opacity: 0.6;
      transform: scale3d(1.1, 1.1, 1.1) translateZ(30px);
    }
    100% {
      opacity: 1;
      transform: scale3d(1, 1, 1) translateZ(0);
    }
  }

  @keyframes flipX {
    0% {
      opacity: 0;
      transform: perspective(1000px) rotateX(30deg) translateZ(80px) translateY(10px);
      filter: blur(3px);
    }
    50% {
      opacity: 0.8;
      transform: perspective(1000px) rotateX(10deg) translateZ(30px) translateY(5px);
      filter: blur(1px);
    }
    100% {
      opacity: 1;
      transform: perspective(1000px) rotateX(0) translateZ(0) translateY(0);
      filter: blur(0);
    }
  }

  @keyframes flipY {
    0% {
      opacity: 0;
      transform: perspective(1000px) rotateY(30deg) translateZ(80px) translateX(10px);
      filter: blur(3px);
    }
    50% {
      opacity: 0.8;
      transform: perspective(1000px) rotateY(10deg) translateZ(30px) translateX(5px);
      filter: blur(1px);
    }
    100% {
      opacity: 1;
      transform: perspective(1000px) rotateY(0) translateZ(0) translateX(0);
      filter: blur(0);
    }
  }

  /* New enhanced animations */
  @keyframes bounce {
    0% {
      opacity: 0;
      transform: translateY(var(--distance)) scale3d(0.9, 0.9, 1);
    }
    50% {
      opacity: 1;
      transform: translateY(-20px) scale3d(1, 1, 1);
    }
    70% {
      transform: translateY(10px);
    }
    85% {
      transform: translateY(-5px);
    }
    100% {
      transform: translateY(0);
    }
  }

  @keyframes spin {
    from {
      opacity: 0;
      transform: rotateZ(var(--spin-degrees, -180deg)) scale3d(0.9, 0.9, 1);
    }
    to {
      opacity: 1;
      transform: rotateZ(0) scale3d(1, 1, 1);
    }
  }

  /* Assign animations to classes */
  .fade.animate-in {
    animation-name: fadeIn;
  }

  .slide-up.animate-in {
    animation-name: slideUp;
  }

  .slide-down.animate-in {
    animation-name: slideDown;
  }

  .slide-left.animate-in {
    animation-name: slideLeft;
  }

  .slide-right.animate-in {
    animation-name: slideRight;
  }

  .zoom.animate-in {
    animation-name: zoomIn;
  }

  .zoom-out.animate-in {
    animation-name: zoomOut;
  }

  .flip-x.animate-in {
    animation-name: flipX;
  }

  .flip-y.animate-in {
    animation-name: flipY;
  }

  .bounce.animate-in {
    animation-name: bounce;
  }

  .spin.animate-in {
    animation-name: spin;
  }

  /* Respect user's reduced motion preferences */
  @media (prefers-reduced-motion: reduce) {
    .animate-on-scroll,
    .motion-reduced {
      animation: none !important;
      transition: none !important;
      transform: none !important;
      opacity: 1 !important;
      will-change: auto !important;
      filter: none !important;
      visibility: visible !important;
    }
  }
</style>
